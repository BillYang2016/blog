<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bill Yang&#39;s Blog</title>
  
  <subtitle>路终会有尽头，但视野总能看到更远的地方。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.bill.moe/"/>
  <updated>2020-01-17T02:08:01.836Z</updated>
  <id>https://blog.bill.moe/</id>
  
  <author>
    <name>Bill Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「通知」博客搬迁到Github Pages</title>
    <link href="https://blog.bill.moe/hello-github/"/>
    <id>https://blog.bill.moe/hello-github/</id>
    <published>2020-01-16T04:19:27.000Z</published>
    <updated>2020-01-17T02:08:01.836Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于zz的Coding Pages最近又加入了腾讯的zz TMS审核系统，这导致我的博客全篇被审核拦截（违规页面参数：综合）。<br>这综合是个什么玩意儿，Coding的客服表示它们也不清楚，用的是第三方服务。<br>于是我决定搬迁了，之前就发现Coding很不好用，本来以前是认为Coding Pages的结点会比较快，这次终于给了我一个最大的搬迁理由。<br>接下来博客会搬迁到Github Pages，当你们看到这篇文章时，博客已经搬迁好了了。<br>其实本来打算搬迁到阿里云，但是因为moe后缀域名没法备份，主机都买好了结果放弃了，ip地址在<a href="http://60.205.209.194/，之后也许会同步更新，觉得太慢的可以访问这个ip。" target="_blank" rel="noopener">http://60.205.209.194/，之后也许会同步更新，觉得太慢的可以访问这个ip。</a><br>原来的Coding Pages下的博客仍然可以用<a href="https://coding.bill.moe/" target="_blank" rel="noopener">https://coding.bill.moe/</a> 访问。<br>博客接下来会继续更新的，谢谢大家一直以来的支持。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="博客迁移" scheme="https://blog.bill.moe/categories/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
    
      <category term="hello world" scheme="https://blog.bill.moe/tags/hello-world/"/>
    
  </entry>
  
  <entry>
    <title>2019 CCPC wannafly 冬令营 Day2 游记+解题报告</title>
    <link href="https://blog.bill.moe/wannafly-camp-day2/"/>
    <id>https://blog.bill.moe/wannafly-camp-day2/</id>
    <published>2020-01-14T04:28:08.000Z</published>
    <updated>2020-01-14T04:44:54.353Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>游记及总结在<a href="https://www.zhihu.com/answer/973191974" target="_blank" rel="noopener">逼乎</a>。</p><a id="more"></a><p>待补</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;游记及总结在&lt;a href=&quot;https://www.zhihu.com/answer/973191974&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;逼乎&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="https://blog.bill.moe/categories/ACM/"/>
    
    
      <category term="比赛酱油记" scheme="https://blog.bill.moe/tags/%E6%AF%94%E8%B5%9B%E9%85%B1%E6%B2%B9%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2019 CCPC wannafly 冬令营 Day1 游记+解题报告</title>
    <link href="https://blog.bill.moe/wannafly-camp-day1/"/>
    <id>https://blog.bill.moe/wannafly-camp-day1/</id>
    <published>2020-01-13T01:40:16.000Z</published>
    <updated>2020-01-22T14:36:16.356Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>游记及总结在<a href="https://www.zhihu.com/answer/972183481" target="_blank" rel="noopener">逼乎</a>。</p><a id="more"></a><h2 id="A-期望逆序对"><a href="#A-期望逆序对" class="headerlink" title="A. 期望逆序对"></a>A. 期望逆序对</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>有$n$个独立的随机变量，其中$x_i$的值是一个从$[l_i,r_i]$中随机选取的整数，即对于$[l_i,r_i]$中的任何一个整数$j$，$x_i=j$的概率都是$(r_i−l_i+1)​^{−1}$。<br>现在你需要给出一个长度为$n$的排列$p$，那么可以得到一个长度为$n$的随机变量序列。你的目标是让结果序列的逆序对个数的期望尽可能少。<br>求逆序对个数的期望的最小值。</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>贪心，按照中点从小到大排序，然后枚举两两区间计算形成逆序对的概率即可。<br>计算逆序对概率的时候要分三种情况讨论，推推公式就可以了。<br>这么简单居然考试没做。（恼）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> LL p=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">LL l,r,inv;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;b) &#123;<span class="keyword">return</span> l+r&lt;b.l+b.r;&#125;</span><br><span class="line">&#125; a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL ans,inv2=(p+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">Quick_Pow</span><span class="params">(LL a,LL b)</span> </span>&#123;</span><br><span class="line">LL sum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; b; b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)sum=sum*a%p;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL a)</span> </span>&#123;<span class="keyword">return</span> Quick_Pow(a,p<span class="number">-2</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL &amp;x,LL v)</span> </span>&#123;x=(x+v)%p;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">a[i].l=Get_Int();</span><br><span class="line">a[i].r=Get_Int();</span><br><span class="line">a[i].inv=inv(a[i].r-a[i].l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].r&lt;=a[j].l)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i].l&lt;=a[j].l&amp;&amp;a[j].r&gt;a[i].r)add(ans,a[i].inv*a[j].inv%p*(a[i].r-a[j].l)%p*(a[i].r-a[j].l+<span class="number">1</span>)%p*inv2%p);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i].l&gt;a[j].l&amp;&amp;a[j].r&gt;a[i].r)add(ans,a[i].inv*a[j].inv%p*((a[i].r-a[i].l+<span class="number">1</span>)*(a[i].l-a[j].l)%p+(a[i].r-a[i].l+<span class="number">1</span>)*(a[i].r-a[i].l)%p*inv2%p)%p);</span><br><span class="line"><span class="keyword">else</span> add(ans,a[i].inv*a[j].inv%p*(<span class="number">2</span>*a[i].r-a[j].l-a[j].r)%p*(a[j].r-a[j].l+<span class="number">1</span>)%p*inv2%p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-密码学"><a href="#B-密码学" class="headerlink" title="B. 密码学"></a>B. 密码学</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>考虑一种加密方式，它需要一个任意长度的原文$m$和秘钥$key$，其中要求原文和秘钥只包含大写和小写的英文字符。<br>首先定义字符之间的加密，用字符$a$去加密字符$b$的结果是：  </p><ol><li>首先把$a$和$b$转成数字$x$和$y$。转换的规则是，小写字母$a$到$z$依次对应$0$到$25$，大写字母依次对应$26$到$51$。  </li><li>计算$x$和$y$的和$z$，对$52$取模，即计算$(x+y)\mod52$。  </li><li>返回数字$z$对应的字符。  </li></ol><p>现在来讲如何用秘钥 key 来加密原文$m$：  </p><ol><li>如果秘钥的 key 的长度小于$m$，那么不停重复 key 直到长度不小于$m$为止。举例来说，如果原文是 beijing，秘钥是 PKUSAA，那么秘钥需要被重复称 PKUSAAPKUSAA。  </li><li>假设原文的长度是$n$，那么对于每一个$[1,n]$的数字$i$，都用 key 的第$i$个字符去加密$m$的第$i$个字符。  </li><li>返回结果。</li></ol><p>那么用 PKUSAA 去加密 beijing 的结果就是：QOcbINV。<br>现在火山哥有$n$个字符串，$s_1$到$s_n$，他对这些字符串做了$m$次加密操作：第$i$次加密操作用第$s_{x_i}$去加密$s_{y_i}$，并把$s_{y_i}$替换成加密结果。<br>现在依次给出$m$次加密操作，以及加密操作结束后每一个字符串的模样，你可以还原出这$n$个字符串原来的模样吗？</p></blockquote><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>倒序模拟即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],b[maxn];</span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tonum</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">isupper</span>(x)?x-<span class="string">'A'</span>+<span class="number">26</span>:x-<span class="string">'a'</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Tochar</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x&lt;<span class="number">26</span>?x+<span class="string">'a'</span>:x<span class="number">-26</span>+<span class="string">'A'</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Decode</span><span class="params">(<span class="built_in">string</span> x,<span class="built_in">string</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lenx=x.length(),leny=y.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>; i&lt;leny; i++,j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=lenx)j=<span class="number">0</span>;</span><br><span class="line">y[i]=Tochar((Tonum(y[i])-Tonum(x[j])+<span class="number">52</span>)%<span class="number">52</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)<span class="built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m; i&gt;=<span class="number">1</span>; i--)s[b[i]]=Decode(s[a[i]],s[b[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-染色图"><a href="#C-染色图" class="headerlink" title="C. 染色图"></a>C. 染色图</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>定义一张无向图$G=⟨V,E⟩$是$k$可染色的当且仅当存在函数$f:V↦\{1,2,⋯,k\}$满足对于$G$中的任何一条边$(u,v)$，都有$f(u)\neq f(v)$。<br>定义函数$g(n,k)$的值为所有包含$n$个点的无自环、无重边的$k$可染色无向图中的边数最大值。举例来说，$g(3,1)=0,g(3,2)=2,g(3,3)=3$。<br>现在给出三个整数$n,l,r$，你需要求解：$(\sum_{i=l}^rg(n,i))\mod 998244353$</p></blockquote><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>设第$i$种颜色的点有$x_i$个，那么为了获得最大的边数，我们应在不同颜色点间都连边，最大边数即为：</p><script type="math/tex; mode=display">g(n,m)=\begin{pmatrix}n\\2\end{pmatrix}-\sum_{i=1}^m\begin{pmatrix}x_i\\2\end{pmatrix}</script><p>由于$f(x)=g(n,m)$的对称性，将$n$尽量平均地分给所有$x_i$，可以让$g(n,m)$最大。此时有$n\bmod m$种颜色有$\lceil\frac nm\rceil$个点，剩下的$m-n\bmod m$个颜色只有$\lfloor\frac nm\rfloor$个点。</p><script type="math/tex; mode=display">g(n,m)=\begin{pmatrix}n\\2\end{pmatrix}-(n\bmod m)\begin{pmatrix}\lceil\frac nm\rceil\\2\end{pmatrix}-(m-n\bmod m)\begin{pmatrix}\lfloor\frac nm\rfloor\\2\end{pmatrix}</script><p>根据恒等式$\lceil\frac nm\rceil=\lfloor\frac {n-1}m\rfloor+1,n\bmod m=n-m\lfloor\frac nm\rfloor$化简得到：</p><script type="math/tex; mode=display">g(n,m)=\begin{pmatrix}n\\2\end{pmatrix}-(n-m\lfloor\frac nm\rfloor)\begin{pmatrix}\lfloor\frac {n-1}m\rfloor+1\\2\end{pmatrix}-(m-n+m\lfloor\frac nm\rfloor)\begin{pmatrix}\lfloor\frac nm\rfloor\\2\end{pmatrix}</script><p>于是使用数论分块就可以在$\sqrt n$的时间内得出每组数据的解了。<br>这种解法有一个$2$的常数，本题还可以考虑使用$n$个数的平方和公式求解，就可以省去这个常数，下方附上队友yk的代码。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>常数$2$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line">LL n,L,R;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get</span><span class="params">(LL L,LL R)</span> </span>&#123;<span class="keyword">return</span> (L+R)*(R-L+<span class="number">1</span>)/<span class="number">2</span>%p;&#125; <span class="comment">//等差数列求和</span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">C2</span><span class="params">(LL x)</span> </span>&#123;<span class="keyword">return</span> x*(x<span class="number">-1</span>)/<span class="number">2</span>%p;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">g</span><span class="params">(LL n,LL l,LL r)</span> </span>&#123;</span><br><span class="line">LL Down=n/l,Up=(n<span class="number">-1</span>)/l+<span class="number">1</span>,len=r-l+<span class="number">1</span>;</span><br><span class="line">LL tmp=Down*get(l,r)%p;</span><br><span class="line">LL val1=(len*n%p-tmp+p)%p*C2(Up)%p,val2=(get(l,r)-n*len%p+tmp+p)%p*C2(Down)%p;</span><br><span class="line"><span class="keyword">return</span> (val1+val2)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=Get_Int();</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">L=Get_Int();</span><br><span class="line">R=Get_Int();</span><br><span class="line"><span class="keyword">int</span> Next=<span class="number">1</span>;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=L; i&lt;=min(R,n<span class="number">-1</span>); i=Next+<span class="number">1</span>) &#123;</span><br><span class="line">Next=min(R,min(n/(n/i),(n<span class="number">-1</span>)/((n<span class="number">-1</span>)/i)));</span><br><span class="line">ans=(ans+g(n,i,Next))%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(C2(n)*(R-L+<span class="number">1</span>)%p-ans+p)%p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>yk的代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) (x)*(x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100007</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1</span>&lt;&lt;<span class="number">29</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (r-l+<span class="number">1</span>)*(l+r)/<span class="number">2</span>%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll N,ll L,ll R)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll l=L,r;l&lt;=R;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=min(R,N/(N/l));ll y=N/l;</span><br><span class="line">     <span class="comment">//   cout&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line">        ans+=(mod-sum(l,r)*(((y*y)%mod+y)%mod))%mod+(<span class="number">2</span>*y+<span class="number">1</span>)%mod*N%mod*(r-l+<span class="number">1</span>)%mod;</span><br><span class="line">        ans%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// cout&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> (N*N%mod*(R-L+<span class="number">1</span>)%mod+mod-ans)%mod*(mod+<span class="number">1</span>)/<span class="number">2</span>%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=read();</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ll n=read(),L=read(),R=read();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,solve(n,L,R)%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="D-生成树"><a href="#D-生成树" class="headerlink" title="D. 生成树"></a>D. 生成树</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>首先给出一些简单的概念：</p><ul><li>对于一张 无向图$G=⟨V,E⟩$，树$T=⟨V,E′⟩$是$G$的生成树当且仅当$E′$是$E$的子集。  </li><li>两棵$G$的生成树$T_1=⟨V,E_1⟩,T_2=⟨V,E_2⟩$是不同的当且仅当它们使用的边集不同。</li><li>集合$\mathcal{T}(G)$表示图$G$所有不同的生成树形成的集合。</li><li>函数$s(G,T)$来衡量树$T$和图$G$的相似度，它的值等于同时出现在$T$和$G$中的边的数量。<br>现在给出两张$n$个点的无向图$G_1,G_2$，你需要求：$\sum_{T\in \mathcal{T}(G_1)}s(G_2,T)$</li></ul></blockquote><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题需要用到矩阵树定理与基尔霍夫矩阵。<br>矩阵树定理告诉我们可以使用基尔霍夫矩阵求生成树的个数。<br>然而这有扩展版，带权的基尔霍夫矩阵可以求一些奇奇怪怪的东西。<br>如果定义一棵生成树的权值是其所有边权相乘，那么构造带权的基尔霍夫矩阵：</p><ol><li>$\forall1\le i\le n,A_{i,i}$为与$i$相连的所有边的权值和。  </li><li>$\forall1\le i\neq j\le n,A_{i,j}$为$(i,j)$边权的相反数。  </li></ol><p>删去矩阵第$n$行第$n$列，得到的矩阵行列式即为所有生成树权值的和。<br>那么对于这道题来说，我们需要构建一个更奇怪的图来将原来的两个图的边合并起来。<br>我们定义只在$G_1$中的边在新图$G_3$中边权为$1$，而在$G_1,G_2$中都存在的边边权为$x$，那么$G_3$生成的基尔霍夫矩阵$A$中每一个元素都是一个关于$x$的多项式，其行列式是一个$n-1$阶的多项式：$\left|A\right|=f(x)=\sum_{i=0}^{n-1}a_ix^i$，考虑$a_i$的意义，即为有$a_i$个生成树有$i$条公共边，因此答案就是$\sum i\times a_i=f’(1)$。  </p><p>行列式$\left|A(x)\right|$求导可以用公式：<br><img src="/wannafly-camp-day1/D.png" alt></p><p>如果继续用行列式的展开化简我们可以得到：</p><script type="math/tex; mode=display">f'(x)=\left|A(x)\right|\sum_{i=1}^n\sum_{j=1}^n(A(x)^{-1})_{i,j}\times A'(x)_{i,j}</script><p>取$x=1$，用高斯消元算逆矩阵和行列式就可以了。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">405</span>,p=<span class="number">998244353</span>,x=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">Quick_Pow</span><span class="params">(LL a,LL b)</span> </span>&#123;</span><br><span class="line">LL sum=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; b; b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)sum=sum*a%p;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL x)</span> </span>&#123;<span class="keyword">return</span> Quick_Pow(x,p<span class="number">-2</span>);&#125;</span><br><span class="line"></span><br><span class="line">LL A[maxn][maxn&lt;&lt;<span class="number">1</span>],B[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> a[maxn][maxn],b[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">Gauss_Jordan</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">LL r=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> row=i;</span><br><span class="line"><span class="keyword">for</span>(; row&lt;=n; row++)<span class="keyword">if</span>(A[row][i])<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(row&gt;n)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(row!=i) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)swap(A[i][j],A[row][j]);</span><br><span class="line">r=(p-r)%p;</span><br><span class="line">&#125;</span><br><span class="line">r=r*A[i][i]%p;</span><br><span class="line">LL t=inv(A[i][i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)A[i][j]=A[i][j]*t%p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line"><span class="keyword">if</span>(j!=i) &#123;</span><br><span class="line">t=A[j][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=m; k++)A[j][k]=(A[j][k]-t*A[i][k]%p+p)%p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,b[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">'1'</span>&amp;&amp;b[i][j]==<span class="string">'1'</span>) &#123;</span><br><span class="line">A[i][j]=-x;</span><br><span class="line">A[i][i]+=x;</span><br><span class="line">B[i][j]=p<span class="number">-1</span>; <span class="comment">//导数</span></span><br><span class="line">B[i][i]+=<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(a[i][j]==<span class="string">'1'</span>) &#123;</span><br><span class="line">A[i][j]=<span class="number">-1</span>;</span><br><span class="line">A[i][i]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)A[i][n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)A[i][i+n]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=(n&lt;&lt;<span class="number">1</span>); j++)A[i][j]=(A[i][j]+p)%p;</span><br><span class="line">LL r=Gauss_Jordan(n,n&lt;&lt;<span class="number">1</span>),ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)ans=(ans+A[i][j+n]*B[i][j]%p)%p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*r%p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-树与路径"><a href="#E-树与路径" class="headerlink" title="E. 树与路径"></a>E. 树与路径</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>在一棵有根树$T$上，任何两点间的最短路径都能够分为两个阶段：</p><ol><li>从起点出发，沿着向根的方向走若干条边。</li><li>向着终点，沿着离开根的方向走若干条边。  </li></ol><p>定义一条路径的权值为向上走的边数乘上向下走的边数。特殊地，当起点等于终点的时候，两阶段的边数都是$0$；当起点是终点的祖先的时候，第一阶段的边数是$0$；当终点是起点的祖先的时候，第二阶段的边数是 0———这三种情况下，路径的权值都是$0$。<br>现在给出一棵$n$个节点的无根树$T$和$m$条路径$(a_i,b_​i)$。对于每一个$r\in[1,n]$，你需要计算当$r$是根节点的时候，所有路径的权值和是多少。  </p></blockquote><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>考试的时候傻了，觉得这个转移必定不可维护，理由是中间点没法考虑，但是如果考虑贡献作差的话就可以维护了。<br>假设$A_x$是以$x$为根的答案（假设当$1$为根时，$x$的父亲是$f_x$），那么$A_1$很容易求出来，现在我们考虑换根求$A_x$，那么只需要考虑$A_x-A_{f_x}$：</p><ol><li>如果一条路径不同时经过$x$与$f_x$，则他们对$A_x,A_{f_x}$的贡献相同。  </li><li>如果路径同时经过$x,f_x$，设路径长度为$len$，向上段路径长度是$l$，那么路径对$A_x$的贡献是$l(len-l)$，而它对$A_{f_x}$的贡献是$(l+1)(len-l-1)$，贡献差为$2l+1-len$。  </li></ol><p>因此我们需要对树上所有的结点$i$，统计同时经过$i,f_i$的路径的$2l+1-len$的和，这样我们就可以通过换根求出$A_i$，问题转化为如何对于每一个$i$求出$2l+1-len$的和。<br>考虑对于一条路径$[u,v]$，它对$u$产生了$1-len$的贡献，它对$f_u$产生了$3-len$的贡献，依次类推，它对每一个路径$[u,lca)$上的点$i$产生了$1-len+2dep_u-2dep_i$的贡献。这是一个等差数列，第$i$个点获得的贡献可以转化为一个关于$dep_i$的一次函数：$a_idep_i+b_i$。<br>每一条路径的贡献可以通过树上差分处理，然后从下往上统计所有的$a_i,b_i$，就可以求出贡献差$A_x-A_{f_x}$了，然后换根即可。  </p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>,K=<span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,Depth[maxn],p[maxn][K];</span><br><span class="line">LL f[maxn],a[maxn],b[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edges[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> Now,<span class="keyword">int</span> fa,<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">Depth[Now]=depth;</span><br><span class="line">p[Now][<span class="number">0</span>]=fa;</span><br><span class="line"><span class="keyword">int</span> K=log2(Depth[Now]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=K; i++)p[Now][i]=p[p[Now][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> Next:edges[Now]) &#123;</span><br><span class="line"><span class="keyword">if</span>(Next==fa)<span class="keyword">continue</span>;</span><br><span class="line">Dfs(Next,Now,depth+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Depth[x]&lt;Depth[y])swap(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=K<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span>(Depth[x]==Depth[y])<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Depth[x]-(<span class="number">1</span>&lt;&lt;i)&gt;=Depth[y])x=p[x][i];</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=K<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span>(p[x][i]&amp;&amp;p[x][i]!=p[y][i]) &#123;</span><br><span class="line">x=p[x][i];</span><br><span class="line">y=p[y][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> Now)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> Next:edges[Now]) &#123;</span><br><span class="line"><span class="keyword">if</span>(Next==p[Now][<span class="number">0</span>])<span class="keyword">continue</span>;</span><br><span class="line">Dfs1(Next);</span><br><span class="line">a[Now]+=a[Next];</span><br><span class="line">b[Now]+=b[Next];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> Now)</span> </span>&#123;</span><br><span class="line">f[Now]+=a[Now]*Depth[Now]+b[Now];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> Next:edges[Now]) &#123;</span><br><span class="line"><span class="keyword">if</span>(Next==p[Now][<span class="number">0</span>])<span class="keyword">continue</span>;</span><br><span class="line">f[Next]+=f[Now];</span><br><span class="line">Dfs2(Next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;edges[x].push_back(y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">m=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x=Get_Int(),y=Get_Int();</span><br><span class="line">AddEdge(x,y);</span><br><span class="line">AddEdge(y,x);</span><br><span class="line">&#125;</span><br><span class="line">Dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x=Get_Int(),y=Get_Int(),lca=LCA(x,y),len=Depth[x]+Depth[y]<span class="number">-2</span>*Depth[lca],lenl=Depth[x]-Depth[lca];</span><br><span class="line">a[x]-=<span class="number">2</span>;</span><br><span class="line">a[y]-=<span class="number">2</span>;</span><br><span class="line">a[lca]+=<span class="number">4</span>;</span><br><span class="line">b[x]+=<span class="number">1</span>-len+<span class="number">2</span>*Depth[x];</span><br><span class="line">b[y]+=<span class="number">1</span>-len+<span class="number">2</span>*Depth[y];</span><br><span class="line">b[lca]-=<span class="number">1</span>-len+<span class="number">2</span>*Depth[x]+<span class="number">1</span>-len+<span class="number">2</span>*Depth[y];</span><br><span class="line">f[<span class="number">1</span>]+=<span class="number">1l</span>l*lenl*(len-lenl);</span><br><span class="line">&#125;</span><br><span class="line">Dfs1(<span class="number">1</span>);</span><br><span class="line">Dfs2(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-乘法"><a href="#F-乘法" class="headerlink" title="F. 乘法"></a>F. 乘法</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给出一个长度为$n$的数列和一个长度为$m$的数列 ，可以构造得到一个$n\times m$的矩阵$C$，其中$C_{i,j}=A_i\times B_j$。<br>给出整数$K$，你需要求出$C$中第$K$大的数的值。</p></blockquote><h3 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h3><p>这道题的难点在于有负数和$0$，可以分成六个表用二分+双指针（难调），也可以二分+lowerbound（但也要特殊处理$0$）。  </p><p>这道题我们调了3个小时，可以说是day1演了的罪魁祸首，主要问题出在配合上，一开始写的是lowerbound，因为$0$的问题出锅，讨论后发现双指针不需要特殊处理，于是重新写双指针，结果更难调，3个小时后又换回lowerbound处理0才过。  </p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><p>队友的代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> a[maxn],b[maxn],rb[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,k;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> mid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">cnt += b + m - upper_bound(b,b+m,(<span class="keyword">long</span> <span class="keyword">double</span>)mid / a[i] + eps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[i]&lt; <span class="number">0</span>) &#123;</span><br><span class="line">cnt += rb + m - upper_bound(rb,rb+m,-((<span class="keyword">long</span> <span class="keyword">double</span>)mid/a[i]) + eps);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> zero=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="keyword">if</span>(a[i]==<span class="number">0</span>)zero++;</span><br><span class="line"><span class="keyword">if</span>(mid&lt;<span class="number">0</span>) cnt+=zero*m;</span><br><span class="line"><span class="comment">//printf("mid=%lld cnt=%lld\n",mid,cnt);</span></span><br><span class="line"><span class="keyword">return</span> cnt &lt;= k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">work</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> _k)</span> </span>&#123;</span><br><span class="line">k = _k - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">-1e13</span>, r = <span class="number">1e13</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0x8000000000000000</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">ans = mid;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) res.push_back(a[i] * b[j]);</span><br><span class="line">sort(res.begin(),res.end());</span><br><span class="line">reverse(res.begin(),res.end());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-----DEBUG BEGIN-----\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x:res) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-----DEBUG  END -----\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> _k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;m,&amp;_k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%Lf"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) <span class="built_in">scanf</span>(<span class="string">"%Lf"</span>,&amp;b[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) rb[i] = -b[i];</span><br><span class="line"><span class="comment">//debug();</span></span><br><span class="line">sort(a,a+n);</span><br><span class="line">sort(b,b+m);</span><br><span class="line">sort(rb,rb+m);</span><br><span class="line"><span class="comment">//k = _k - 1;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,work(_k));</span><br><span class="line"><span class="comment">//for (int mid=-10;mid&lt;=10;mid++) printf("debug mid=%d %lld\n",mid,check(mid));</span></span><br><span class="line"><span class="comment">//for (long long _k=1;_k&lt;=n*m;_k++) printf("debug k=%lld %lld\n",_k,work(_k));</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="G-圆凸包"><a href="#G-圆凸包" class="headerlink" title="G. 圆凸包"></a>G. 圆凸包</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>给出$n$个点求他们的凸包是一个经典问题，所以出了一道稍微难一点的题。<br>给出平面上$n$个圆，第$i$个圆的圆心是$(x_i,y_i)$，半径是$r_i$。定义这$n$个点的凸包为所有满足以下条件的点$P$形成的区域：存在点$A,B$和常数$\alpha\in[0,1]$满足$A,B$都在某个圆的内部（所在的圆可以不同）且$P=\alpha A+(1−\alpha)B$。换句话说，这$n$个点的凸包等于这$n$个圆内部的所有点形成的凸包。<br>现在给出这$n$个圆，试求这$n$个圆形成的凸包的周长。<br>给出整数$K$，你需要求出$C$中第$K$大的数的值。</p></blockquote><h3 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h3><p>很容易想到凸包上存在的只可能是圆弧或者公切线。<br>而一个点要成为凸包上的点也必须满足条件：  </p><ol><li>它是两个圆的外切点</li><li>它不被任何圆覆盖<br>处理公切线部分的凸包很容易想，主要问题在于如何判断凸包点集中的相邻两点连接它们的是线段还是圆弧。<br>这里吉老师给出了一个性质：如果这两个点在一个圆上，连接它们的是圆弧，否则是线段。<br>接下来就贴板子就可以了。  </li></ol><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><p>没有，不想写了。（有一定概率会回来补）  </p><h2 id="H-最大公约数"><a href="#H-最大公约数" class="headerlink" title="H. 最大公约数"></a>H. 最大公约数</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>有三个人，$A,B,C$，其中$A$和$B$共享了一个神秘的数字$k$，已知$1\le k\le n$。<br>现在$A$和$C$说：“$k$的值等于$x$”。<br>$C$不太信任$A$，于是想向$B$确认一下$k$是否真的等于$x$。$B$虽然不想直接把$k$的值告诉$C$，但是$B$允许$C$给出一个正整数$y$（注意$y$可以大于$n$），然后$B$会回答$gcd(k,y)$。<br>现在给出$k,n$，你需要帮助$C$决定这样的$y$的取值，使得$C$一定可以通过$B$的回答来判断$A$有没有撒谎。如果这样的$y$有多个，你需要输出最小的那个。</p></blockquote><h3 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h3><ol><li>$y$必须是$k$的倍数，否则无法区分$gcd(y,k)$和$k$。  </li><li>对于$[1,\lfloor\frac nk\rfloor]$的每一个质数$p$，$\frac yk$必须是$p$的倍数，否则无法区分$k$和$pk$。  </li><li>答案就是$k\prod p_i$，需要用高精度。  </li></ol><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><p>队友的代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) (x)*(x)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100007</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1</span>&lt;&lt;<span class="number">29</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1007</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1007</span>][<span class="number">1007</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bignum</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> shu[<span class="number">300</span>];<span class="keyword">int</span> len;</span><br><span class="line">bignum()&#123;</span><br><span class="line"><span class="built_in">memset</span>(shu,<span class="number">0</span>,<span class="keyword">sizeof</span>(shu));</span><br><span class="line">&#125;</span><br><span class="line">bignum <span class="keyword">operator</span> = (<span class="keyword">int</span> a)&#123;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">30</span>];<span class="built_in">sprintf</span>(b+<span class="number">1</span>,<span class="string">"%d"</span>,a);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (bignum a) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(len!=a.len) <span class="keyword">return</span> len&lt;a.len;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=a.len;i;i--) <span class="keyword">if</span>(shu[i]!=a.shu[i]) <span class="keyword">return</span> shu[i]&lt;a.shu[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (bignum a) <span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(len!=a.len) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=a.len;i;i--) <span class="keyword">if</span>(shu[i]!=a.shu[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">bignum <span class="keyword">operator</span> = (<span class="keyword">char</span> *a)&#123;</span><br><span class="line">len=<span class="built_in">strlen</span>(a+<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;a[i]==<span class="string">'0'</span>;i++) len--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) shu[i]=a[len-i+<span class="number">1</span>]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (bignum a) <span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&lt;*<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(shu[i]&gt;<span class="number">9</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==len)&#123;</span><br><span class="line">shu[++len]=shu[i]/<span class="number">10</span>;</span><br><span class="line">shu[i]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> shu[i+<span class="number">1</span>]+=shu[i]/<span class="number">10</span>,shu[i]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bignum <span class="keyword">operator</span> + (bignum a)&#123;</span><br><span class="line"><span class="keyword">int</span> lm=max(len,a.len);bignum new1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lm;i++)&#123;</span><br><span class="line">new1.shu[i]=shu[i]+a.shu[i];</span><br><span class="line">&#125;</span><br><span class="line">new1.len=lm;</span><br><span class="line">new1.move();</span><br><span class="line"><span class="keyword">return</span> new1;</span><br><span class="line">&#125;</span><br><span class="line">bignum <span class="keyword">operator</span> * (bignum a)&#123;</span><br><span class="line">bignum new1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=a.len;k++)</span><br><span class="line">new1.shu[i+k<span class="number">-1</span>]+=shu[i]*a.shu[k];</span><br><span class="line">new1.len=len+a.len<span class="number">-1</span>;</span><br><span class="line">new1.move();</span><br><span class="line"><span class="keyword">return</span> new1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len;i;i--) <span class="built_in">printf</span>(<span class="string">"%d"</span>,shu[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">2</span>*i;k&lt;=<span class="number">1000</span>;k+=i)\</span><br><span class="line">vis[k]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> t=read();</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n=read(),m=read();</span><br><span class="line"><span class="keyword">int</span> x=m;bignum tot;tot=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">bignum now;now=i;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(x%i==<span class="number">0</span>) x/=i,tot=tot*now;</span><br><span class="line"><span class="keyword">if</span>(m*i&lt;=n) tot=tot*now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m*i&lt;=n) tot=tot*now;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tot.print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="I-K小数查询"><a href="#I-K小数查询" class="headerlink" title="I. K小数查询"></a>I. K小数查询</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>热爱学习刻苦奋斗的九条可怜最近做了很多数据结构题，接触到了$K$小数查询这一系列的问题以及线段树的重磅打击这一套理论，她觉得这两样东西都很厉害，所以想要出一道题。<br>给出一个长度为$n$的数列$A$，接下来有$m$次操作，操作有两种：</p><ul><li>$1\,l\,r\,x$，表示对$i\in[l,r]$，令$A_i=min(A_i,x)$</li><li>$2\,l\,r\,k$，表示询问区间$[l,r]$中第$k$小的数。<br>这个问题对可怜来说有点难，你能帮帮她吗。</li></ul></blockquote><h3 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h3><p>线段树套权值线段树，内部权值线段树需要可持久化处理。<br>也就是，对区间$[1,n]$建立线段树，对于每一个区间$[l,r]$建立一棵权值线段树保存每种权值出现了多少次。<br>这样询问可以转化为在$\log n$棵权值线段树上二分，询问可以在$O(\log^2n)$的时间内处理结束。<br>修改时，线段树先定位到一些结点区间$[l,r]$（这些区间的定位用到吉老师线段树定位,外部线段树的定位还是$\log n$的时间），将其内部权值线段树中$\ge x$的所有数并入$x$处，考虑暴力修改，可以转化为$t+1$次单点修改，$t$是被并入的结点个数，修改完权值线段树后，这$t+1$次修改需要向上维护，每一个父亲结点的权值线段树都需要重新合并，在可持久化后，这一段的时间复杂度是$O(t\log^2n)$。<br>接着在$[l,r]$这个区间打上已经取$\min$的标记，在标记下传时将比$x$更大的结点并入$x$。<br>时间复杂度的瓶颈在于$O(t\log^2n)$，每一次操作后内层线段树的叶子结点都会减少$t$，而$t$最多减少$n\log n$，所以$t\le n\log n$，本题时间复杂度为$O(n\log^3 n)$。  </p><p>但是这道题卡时间卡空间烦死了，到处要回收内存（所以写了两个merge）。  </p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">80005</span>,maxc=maxn*<span class="number">20</span>*<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; roots;</span><br><span class="line"><span class="keyword">int</span> n,m,top=<span class="number">0</span>,S[maxc];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Value_Tree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> ls,rs,size;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;ls=rs=size=<span class="number">0</span>;&#125;</span><br><span class="line">Tree() &#123;clear();&#125;</span><br><span class="line">&#125; tree[maxc];</span><br><span class="line"><span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> !top?++size:S[top--];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;S[++top]=index;tree[index].clear();&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> val,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!index)index=newnode();</span><br><span class="line">tree[index].size+=delta;</span><br><span class="line"><span class="keyword">if</span>(left==right)<span class="keyword">return</span> index;</span><br><span class="line"><span class="keyword">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(val&lt;=mid)tree[index].ls=insert(tree[index].ls,left,mid,val,delta);</span><br><span class="line"><span class="keyword">else</span> tree[index].rs=insert(tree[index].rs,mid+<span class="number">1</span>,right,val,delta);</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> val,<span class="keyword">int</span> delta=<span class="number">1</span>)</span> </span>&#123;<span class="keyword">return</span> insert(root,<span class="number">1</span>,n,val,delta);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">//将左右合并并可持久化</span></span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">0</span>&amp;&amp;r==<span class="number">0</span>)<span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> index=newnode();</span><br><span class="line">tree[index].size=tree[l].size+tree[r].size;</span><br><span class="line">tree[index].ls=merge(tree[l].ls,tree[r].ls);</span><br><span class="line">tree[index].rs=merge(tree[l].rs,tree[r].rs);</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge2</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> del=<span class="number">0</span>)</span> </span>&#123; <span class="comment">//将右边并入左边并删除右边</span></span><br><span class="line"><span class="keyword">if</span>(r==<span class="number">0</span>)<span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">0</span>)l=newnode();</span><br><span class="line">tree[l].size+=tree[r].size;</span><br><span class="line">tree[l].ls=merge2(tree[l].ls,tree[r].ls,del);</span><br><span class="line">tree[l].rs=merge2(tree[l].rs,tree[r].rs,del);</span><br><span class="line"><span class="keyword">if</span>(del)remove(r);</span><br><span class="line"><span class="keyword">if</span>(!del&amp;&amp;tree[l].size==<span class="number">0</span>) &#123;remove(l);<span class="keyword">return</span> <span class="number">0</span>;&#125; <span class="comment">//虚空子树不能删0结点，因为有负的贡献</span></span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycle</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!index)<span class="keyword">return</span>;</span><br><span class="line">remove(index);</span><br><span class="line">recycle(tree[index].ls);</span><br><span class="line">recycle(tree[index].rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left==right)<span class="keyword">return</span> left;</span><br><span class="line"><span class="keyword">int</span> mid=(left+right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> lsize=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> rt:roots)lsize+=tree[tree[rt].ls].size;</span><br><span class="line"><span class="keyword">if</span>(lsize&gt;=val) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;rt:roots)rt=tree[rt].ls;</span><br><span class="line"><span class="keyword">return</span> query(left,mid,val);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;rt:roots)rt=tree[rt].rs;</span><br><span class="line"><span class="keyword">return</span> query(mid+<span class="number">1</span>,right,val-lsize);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Segment_Tree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> left,right,max,cnt,sec,lazy,root;</span><br><span class="line">Tree(<span class="keyword">int</span> l=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>):left(l),right(r),max(<span class="number">0</span>),cnt(<span class="number">0</span>),sec(<span class="number">0</span>),lazy(INT_MAX),root(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125; tree[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (index&lt;&lt;1)|1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[ls].max&gt;tree[rs].max) &#123;</span><br><span class="line">tree[index].max=tree[ls].max;</span><br><span class="line">tree[index].sec=max(tree[rs].max,tree[ls].sec);</span><br><span class="line">tree[index].cnt=tree[ls].cnt;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(tree[ls].max&lt;tree[rs].max) &#123;</span><br><span class="line">tree[index].max=tree[rs].max;</span><br><span class="line">tree[index].sec=max(tree[ls].max,tree[rs].sec);</span><br><span class="line">tree[index].cnt=tree[rs].cnt;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tree[index].max=tree[ls].max;</span><br><span class="line">tree[index].sec=max(tree[ls].sec,tree[rs].sec);</span><br><span class="line">tree[index].cnt=tree[ls].cnt+tree[rs].cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> Left,<span class="keyword">int</span> Right)</span> </span>&#123;</span><br><span class="line">tree[index]=Tree(Left,Right);</span><br><span class="line"><span class="keyword">if</span>(Left==Right) &#123;</span><br><span class="line">tree[index].max=a[Left];</span><br><span class="line">tree[index].cnt=<span class="number">1</span>;</span><br><span class="line">tree[index].root=Value_Tree::insert(tree[index].root,a[Left]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(Left+Right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(ls,Left,mid);</span><br><span class="line">build(rs,mid+<span class="number">1</span>,Right);</span><br><span class="line">tree[index].root=Value_Tree::merge(tree[ls].root,tree[rs].root);</span><br><span class="line">push_up(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[index].max&lt;=val)<span class="keyword">return</span>;</span><br><span class="line">tree[index].root=Value_Tree::insert(tree[index].root,tree[index].max,-tree[index].cnt);</span><br><span class="line">tree[index].root=Value_Tree::insert(tree[index].root,val,tree[index].cnt);</span><br><span class="line">tree[index].max=val;</span><br><span class="line">tree[index].lazy=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[index].lazy==INT_MAX)<span class="keyword">return</span>;</span><br><span class="line">modify(ls,tree[index].lazy);</span><br><span class="line">modify(rs,tree[index].lazy);</span><br><span class="line">tree[index].lazy=INT_MAX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> Left,<span class="keyword">int</span> Right,<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Left&gt;tree[index].right||Right&lt;tree[index].left||tree[index].max&lt;val)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(Left&lt;=tree[index].left&amp;&amp;Right&gt;=tree[index].right&amp;&amp;tree[index].sec&lt;val) &#123;</span><br><span class="line"><span class="keyword">int</span> root=Value_Tree::insert(<span class="number">0</span>,tree[index].max,-tree[index].cnt); <span class="comment">//建立虚空树以便更新祖先信息</span></span><br><span class="line">root=Value_Tree::insert(root,val,tree[index].cnt);</span><br><span class="line">modify(index,val);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">int</span> root=Value_Tree::merge2(modify(ls,Left,Right,val),modify(rs,Left,Right,val),<span class="number">1</span>);</span><br><span class="line">tree[index].root=Value_Tree::merge2(tree[index].root,root);</span><br><span class="line">push_up(index);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> Left,<span class="keyword">int</span> Right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Left&gt;tree[index].right||Right&lt;tree[index].left)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(Left&lt;=tree[index].left&amp;&amp;Right&gt;=tree[index].right) &#123;</span><br><span class="line">roots.push_back(tree[index].root);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down(index);</span><br><span class="line">query(ls,Left,Right);</span><br><span class="line">query(rs,Left,Right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">m=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)a[i]=Get_Int();</span><br><span class="line">Segment_Tree::build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> opt=Get_Int(),l=Get_Int(),r=Get_Int(),v=Get_Int();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>)Value_Tree::recycle(Segment_Tree::modify(<span class="number">1</span>,l,r,v));</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">roots.clear();</span><br><span class="line">Segment_Tree::query(<span class="number">1</span>,l,r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Value_Tree::query(<span class="number">1</span>,n,v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-德州扑克"><a href="#J-德州扑克" class="headerlink" title="J. 德州扑克"></a>J. 德州扑克</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>略</p><h3 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h3><p>枚举减枝，算了算了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;游记及总结在&lt;a href=&quot;https://www.zhihu.com/answer/972183481&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;逼乎&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="https://blog.bill.moe/categories/ACM/"/>
    
    
      <category term="贪心" scheme="https://blog.bill.moe/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="高斯消元" scheme="https://blog.bill.moe/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
    
      <category term="线段树" scheme="https://blog.bill.moe/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="矩阵树定理" scheme="https://blog.bill.moe/tags/%E7%9F%A9%E9%98%B5%E6%A0%91%E5%AE%9A%E7%90%86/"/>
    
      <category term="二分" scheme="https://blog.bill.moe/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="数论" scheme="https://blog.bill.moe/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="比赛酱油记" scheme="https://blog.bill.moe/tags/%E6%AF%94%E8%B5%9B%E9%85%B1%E6%B2%B9%E8%AE%B0/"/>
    
      <category term="高精度" scheme="https://blog.bill.moe/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
      <category term="segment_tree_beats" scheme="https://blog.bill.moe/tags/segment-tree-beats/"/>
    
      <category term="计算几何" scheme="https://blog.bill.moe/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>重庆第十届ACM市赛游记</title>
    <link href="https://blog.bill.moe/CQ-ACM-2019/"/>
    <id>https://blog.bill.moe/CQ-ACM-2019/</id>
    <published>2019-12-24T02:12:19.000Z</published>
    <updated>2019-12-24T02:58:33.597Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一次打市赛，和两位学长组了个队，队名叫$100000007$，1e8+7。<br><blockquote class="blockquote-center"><ul><li>为什么要叫这个队名呀？</li><li><del>因为被这个取模坑过</del></li></ul></blockquote></p><a id="more"></a><h2 id="day-0"><a href="#day-0" class="headerlink" title="day 0"></a>day 0</h2><p>学院开迎新晚会，并没有什么时间准备。</p><h2 id="day-1"><a href="#day-1" class="headerlink" title="day 1"></a>day 1</h2><p>早上坐车来到学校，然后学校签到。<br>然而，我们学校，因为种种原因，并没有成功缴费。（震惊，当代985竟然交不起比赛报名费）<br>之后在志愿者小姐姐的指引下，让我们先参赛之后再进行缴费的流程。<br>拍了个照。<br><img src="/CQ-ACM-2019/1.jpg" alt><br>于是我们就去食堂吃午饭了。  </p><p>食堂太小了，里面人山人海，根本无法打饭，甚至找不到座位。<br>我们在食堂隔壁找了个座位聊了会天再去吃饭，终于排好队达到了饭发现社长让我们出去集合了。  </p><p>之后来到比赛机房，放好电脑手机，机房里每支队伍有4台电脑，但是主办方表示只有1台可以提交，但是每支队伍前后的空间很狭窄，对于讨论很不方便。<br>之后主办方又让我们只留一台电脑，其他的电脑关掉。smg。  </p><p>开始比赛后分工，A题是一道垃圾计数题，暴力或者打表都可以，于是开始打代码，队长打了个暴力调试花了18分钟，隔壁cyy只花了1min就过了，<del>是不是应该反省一下</del>。  </p><p>在队长打A题的时候，我在看H题，队友在看D题。<br>H题很快我出解了，就是一个贪心，但是代码很难写，先放在这儿。<br>D题队友给我们简单描述了下题意，很气的是，感觉就是个类似并查集的东西，但无论怎么想都会超时。  </p><p>A题过了后看了下榜，发现F题有很多人写，队友看了下题然后发现是道水题，于是就过去写A了。<br>我把H题想法告诉了队长，然后看了下B题cyy的珍珠奶茶，裸三角函数，于是也过去水过了，剩下的H题队长用了堆来写然后疯狂调试。  </p><p>然后就进入了自闭阶段。<br>D题感觉很奇怪没法得出合理的时间，C题感觉建模后跑类似最小生成树的东西，但是时间复杂度始终不对。<br>E题的题面甚至有锅，不过推了下样例懂了题意就没有反映上去，E题感觉是长链剖分后得到每个结点处的信息表，然后利用这个信息表求出题目所需要的答案，不过如何求出题目所需要的答案，我认为这应该是一个经典模型，不过没能推出来。<br>G题cyy买奶茶，可以想到是分数规划，不过我们发现$n$个点$n$条边，这是个基环树，需要对环进行展开然后做分数规划和树形Dp。  </p><p>终于，队长花了一大把时间把H题调过了，加入了思考。此时榜单上面有一个队伍过了G题，不过我忘了分数规划该怎么写<del>（根本没有复习）</del>，队长讲了一下过后我尝试写了一下，推了推样例发现有编号为$0$的点，这根本就不是基环树，就是一棵树！这是我们这次比赛最大的失误了，不过也有点坑，cyy别再喝奶茶了吧。  </p><p>当我们A掉G题后发现榜单登顶了，然后继续自闭。<br>C题模型转化后开始各种胡思乱想，然后队长发现自己读错题了<del>（不过并没有什么帮助）</del>。<br>最后半小时封榜，我们没能做出来，于是<del>诅咒</del>其他队伍也没有做出来的，最终成功拿到rank1。  </p><p>和出题人交流后，C题竟然就是个线段树，维护四个插头。D题是ST表加并查集（从没想过竟然可以这么做）。E题确实是长链剖分，然后可以推出结论上下一正一负的时候答案为$0$（完全推不出来）。  </p><h2 id="颁奖"><a href="#颁奖" class="headerlink" title="颁奖"></a>颁奖</h2><p>去年市赛rk1队伍人手一个平板，今年啥都没有，枯了。  </p><p>去了颁奖所在礼堂后竟然没有位置了，只好坐在最后面的台阶上摸鱼。<br><img src="/CQ-ACM-2019/2.jpg" alt><br><del>震惊，重庆大学代表队由于交不起报名费，颁奖典礼无处落座。</del></p><p>最终我们以1个特等奖，4个一等奖，3个二等奖，喜提团体第一。  </p><p>附一张队长帅照。<br><img src="/CQ-ACM-2019/3.jpg" alt><br><del>憨憨队长差点直接从礼仪手里把证书拿走</del></p><p>再接再厉吧，冬令营见。<del>（先苟过期末考再说）</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次打市赛，和两位学长组了个队，队名叫$100000007$，1e8+7。&lt;br&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;ul&gt;
&lt;li&gt;为什么要叫这个队名呀？&lt;/li&gt;
&lt;li&gt;&lt;del&gt;因为被这个取模坑过&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="https://blog.bill.moe/categories/ACM/"/>
    
    
      <category term="比赛酱油记" scheme="https://blog.bill.moe/tags/%E6%AF%94%E8%B5%9B%E9%85%B1%E6%B2%B9%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>重大ACM社团市赛选拔赛 Round 2 题解</title>
    <link href="https://blog.bill.moe/CQU-Selection-2019-Round2/"/>
    <id>https://blog.bill.moe/CQU-Selection-2019-Round2/</id>
    <published>2019-12-08T06:46:47.000Z</published>
    <updated>2019-12-08T10:59:35.940Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Round 2的题目总体而言较难，对有基础的学生区分度较好。<br>题目难度系数：</p><ul><li>A : 3</li><li>B : 2</li><li>C : 4</li><li>D : 5</li><li>E : 4</li><li>F : 5</li><li>G : 1</li></ul><a id="more"></a><hr><h2 id="A-跳格子"><a href="#A-跳格子" class="headerlink" title="A.跳格子"></a><a href="http://94.191.85.166:8000/contest/4/problem/A" target="_blank" rel="noopener">A.跳格子</a></h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>建完图跑最小生成树即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Prim<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> from,to,dist;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HeapNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> d,u;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (HeapNode a) <span class="keyword">const</span> &#123;<span class="keyword">return</span> d&gt;a.d;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Prim</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n,ans,dist[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">bool</span> vst[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="keyword">this</span>-&gt;n=n;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dist)</span> </span>&#123;</span><br><span class="line">edges.push_back((Edge) &#123;from,to,dist&#125;);</span><br><span class="line"><span class="keyword">int</span> m=edges.size();</span><br><span class="line">G[from].push_back(m<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)dist[i]=INT_MAX;</span><br><span class="line">priority_queue&lt;HeapNode&gt; Q;</span><br><span class="line">Q.push((HeapNode) &#123;</span><br><span class="line"><span class="number">0</span>,s</span><br><span class="line">&#125;);</span><br><span class="line">dist[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!Q.empty()) &#123;</span><br><span class="line">HeapNode Now=Q.top();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">if</span>(vst[Now.u])<span class="keyword">continue</span>;</span><br><span class="line">vst[Now.u]=<span class="number">1</span>;</span><br><span class="line">ans+=dist[Now.u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> id:G[Now.u]) &#123;</span><br><span class="line">Edge&amp; e=edges[id];</span><br><span class="line"><span class="keyword">int</span> Next=e.to,v=e.dist;</span><br><span class="line"><span class="keyword">if</span>(!vst[Next]&amp;&amp;v&lt;dist[Next]) &#123;</span><br><span class="line">dist[Next]=v;</span><br><span class="line">Q.push((HeapNode) &#123;</span><br><span class="line">dist[Next],Next</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125; prim;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> (x<span class="number">-1</span>)*m+y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">m=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)a[i][j]=Get_Int();</span><br><span class="line">prim.init(n*m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line">prim.AddEdge(id(i,j),id(i+<span class="number">1</span>,j),-a[i][j]*a[i+<span class="number">1</span>][j]);</span><br><span class="line">prim.AddEdge(id(i+<span class="number">1</span>,j),id(i,j),-a[i][j]*a[i+<span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;m; j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">prim.AddEdge(id(i,j),id(i,j+<span class="number">1</span>),-a[i][j]*a[i][j+<span class="number">1</span>]);</span><br><span class="line">prim.AddEdge(id(i,j+<span class="number">1</span>),id(i,j),-a[i][j]*a[i][j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,-prim.main(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Kruskal<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x - <span class="number">1</span>) * m + y - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;x,<span class="keyword">const</span> edge &amp;y) &#123;</span><br><span class="line"><span class="keyword">return</span> x.w &gt; y.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[<span class="number">2</span>*<span class="number">205</span>*<span class="number">205</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">unionset</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">205</span>*<span class="number">205</span>];</span><br><span class="line">unionset() &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">205</span>*<span class="number">205</span>;i++) f[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (f[x] == x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">f[find(x)] = find(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;us;</span><br><span class="line"><span class="keyword">int</span> ecnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != n) e[ecnt++] = (edge)&#123;id(i,j),id(i+<span class="number">1</span>,j),a[i][j]*a[i+<span class="number">1</span>][j]&#125;;</span><br><span class="line"><span class="keyword">if</span> (j != m) e[ecnt++] = (edge)&#123;id(i,j),id(i,j+<span class="number">1</span>),a[i][j]*a[i][j+<span class="number">1</span>]&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(e,e+ecnt);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ecnt &amp;&amp; cnt &lt; n*m;i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!us.check(e[i].u,e[i].v)) &#123;</span><br><span class="line">us.uni(e[i].u,e[i].v);</span><br><span class="line">cnt ++;</span><br><span class="line">ans += e[i].w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="B-串串游戏"><a href="#B-串串游戏" class="headerlink" title="B.串串游戏"></a><a href="http://94.191.85.166:8000/contest/4/problem/B" target="_blank" rel="noopener">B.串串游戏</a></h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>一个简单的博弈论问题。<br>使用必胜必败态转移关系进行递推即可：  </p><ul><li>一个状态是必胜态当且仅当其后继状态包含一个必败态</li><li>一个状态是必败态当且仅当其后继状态均为必胜态</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>,maxm=<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxm],f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(~f[n])<span class="keyword">return</span> f[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)<span class="keyword">if</span>(n&gt;=a[i]&amp;&amp;!Solve(n-a[i]))<span class="keyword">return</span> f[n]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> f[n]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">m=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)a[i]=Get_Int();</span><br><span class="line">fill(f,f+n+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(Solve(n))<span class="built_in">puts</span>(<span class="string">"xiaoqianglll"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Grafiore"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="C-滑稽树"><a href="#C-滑稽树" class="headerlink" title="C.滑稽树"></a><a href="http://94.191.85.166:8000/contest/4/problem/C" target="_blank" rel="noopener">C.滑稽树</a></h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>求编号连续的区间的点在树上的最近公共祖先</p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>这道题有很多种做法。<br>首先需要敲一个LCA的板子，可以用倍增，可以用Dfs序。<br>如果用Dfs序，题目中有两种编号任意混淆，建议使用倍增。  </p><p>第一种做法：线段树合并LCA<br>用线段树维护区间的LCA，因为LCA有可并性，因此可以这样做，询问时直接查询对应区间即可。<br>时间复杂度是$O(n\log^2 n+q\log^2n)$，另外还包含线段树的巨大常数，可能需要卡常才能通过。  </p><p>第二种做法：Dfs序+RMQ+线段树<br>同样类似第一种做法，但使用Dfs序+RMQ来查询LCA，这样可以做到查询LCA只需要$O(1)$的时间。<br>然后建立线段树维护区间LCA，时间复杂度是$O(n\log n+q\log n)$。  </p><p>第三种做法：Tarjan求LCA<br>没有深究</p><p>第四种做法：两次ST表+RMQ<br>首先求出编号为$i$和编号为$i+1$的LCA。<br>考虑，区间$[x,y]$的LCA一定在区间中$[i,i+1]$的LCA列表中。<br>然后建立第二个ST表，将区间中深度更小的那一个LCA保存下来，使用RMQ回答询问。<br>时间复杂度是$O(n\log n+q)$</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>第一种做法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ni 1000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> de(x) cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> q,l,r,x,y,k,ss[ni];</span><br><span class="line"><span class="keyword">int</span> vis[ni],f[ni][<span class="number">35</span>],fi[ni],p,n,a,b,deep[ni],s;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> dat;</span><br><span class="line">&#125;t[<span class="number">1000000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next,to;</span><br><span class="line">&#125;w[ni];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> xx=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">xx=xx*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jiabian</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">w[++p].next=fi[x];</span><br><span class="line">w[p].to=y;</span><br><span class="line">fi[x]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;   vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=fi[u];i;i=w[i].next)</span><br><span class="line"><span class="keyword">if</span>(!vis[w[i].to])</span><br><span class="line">&#123;</span><br><span class="line">f[w[i].to][<span class="number">0</span>]=u;</span><br><span class="line">deep[w[i].to]=deep[u]+<span class="number">1</span>;</span><br><span class="line">dfs(w[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[x]&lt;deep[y]) swap(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">31</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(deep[f[x][i]]&gt;=deep[y])</span><br><span class="line">x=f[x][i];</span><br><span class="line"><span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    <span class="keyword">if</span>(f[x][i]!=f[y][i])</span><br><span class="line">x=f[x][i],y=f[y][i];</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bulid</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[p].l=l;t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">t[p].dat=l;<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">bulid(p*<span class="number">2</span>,l,mid);</span><br><span class="line">bulid(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">t[p].dat=lca(t[p*<span class="number">2</span>].dat,t[p*<span class="number">2</span>+<span class="number">1</span>].dat);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=t[p].l&amp;&amp;r&gt;=t[p].r)</span><br><span class="line">&#123;</span><br><span class="line">ss[++k]=t[p].dat;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(t[p].l+t[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) ask(p*<span class="number">2</span>,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">// freopen("st.in","r",stdin);</span></span><br><span class="line">   <span class="comment">// freopen("st.out","w",stdout);</span></span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;   x=read();y=read();</span><br><span class="line">    jiabian(x,y);</span><br><span class="line">    jiabian(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    deep[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">30</span>;j++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    f[i][j]=f[f[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">    bulid(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    l=read();r=read();</span><br><span class="line">    k=<span class="number">0</span>;ask(<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">int</span> ak=ss[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=k;j++)</span><br><span class="line">    ak=lca(ak,ss[j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ak);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种做法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v,next;</span><br><span class="line">&#125;e[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> ecnt;</span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">e[ecnt].v = v;</span><br><span class="line">e[ecnt].next = head[u];</span><br><span class="line">head[u] = ecnt;</span><br><span class="line">ecnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> depth[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> node[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> first[maxn];</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> st[<span class="number">2</span>*maxn][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pow2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_RMQ</span><span class="params">(<span class="keyword">int</span> range)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=range;i++) st[i][<span class="number">0</span>] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;pow2(j)&lt;=range;j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i+pow2(j)<span class="number">-1</span>&lt;range;i++) &#123;</span><br><span class="line"><span class="keyword">int</span> l = st[i][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> r = st[i+pow2(j<span class="number">-1</span>)][j<span class="number">-1</span>];</span><br><span class="line">st[i][j] = depth[l] &lt; depth[r] ? l : r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">RMQ</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">//返回位置</span></span><br><span class="line"><span class="keyword">if</span> (u &gt; v) swap(u,v);</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">log</span>(v-u+<span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> l = st[u][k];</span><br><span class="line"><span class="keyword">int</span> r = st[v-pow2(k)+<span class="number">1</span>][k];</span><br><span class="line"><span class="keyword">return</span> depth[l] &lt; depth[r] ? l : r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> node[RMQ(first[u],first[v])];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">node[t] = u;</span><br><span class="line">depth[t] = d;</span><br><span class="line">first[u] = t;</span><br><span class="line">t++;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[u];~i;i=e[i].next) &#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">DFS(v,d+<span class="number">1</span>);</span><br><span class="line">node[t] = u;</span><br><span class="line">depth[t] = d;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Seg &#123;</span><br><span class="line"><span class="comment">//两倍空间公式 &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> node (l+r) | (l!=r)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (l+r)/2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (l+mid) | (l != mid)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (mid+1+r) | (mid+1 != r)</span></span><br><span class="line"><span class="comment">//两倍空间公式 &#125;</span></span><br><span class="line"><span class="keyword">int</span> lca[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">lca[node] = l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">build(l,mid);</span><br><span class="line">build(mid+<span class="number">1</span>,r);</span><br><span class="line">lca[node] = LCA(lca[lson],lca[rson]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line"><span class="keyword">return</span> lca[node];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (R &lt;= mid) <span class="keyword">return</span> query(l,mid,L,R);</span><br><span class="line"><span class="keyword">if</span> (L &gt; mid) <span class="keyword">return</span> query(mid+<span class="number">1</span>,r,L,R);</span><br><span class="line"><span class="keyword">return</span> LCA(query(l,mid,L,R),query(mid+<span class="number">1</span>,r,L,R));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> node</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rson</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">AddEdge(u,v);</span><br><span class="line">AddEdge(v,u);</span><br><span class="line">&#125;</span><br><span class="line">DFS(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">init_RMQ(t);</span><br><span class="line">Seg::build(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span> (m --) &#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Seg::query(<span class="number">1</span>,n,l,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第四种做法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300005</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,p[maxn][<span class="number">35</span>],f[maxn][<span class="number">35</span>],a[maxn],father[maxn],Depth[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;edges[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;edges[x].push_back(y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sparse_Table</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=log2(n); j++)p[i][j]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)p[i][<span class="number">0</span>]=father[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=log2(n); j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">if</span>(p[i][j<span class="number">-1</span>]!=<span class="number">-1</span>)p[i][j]=p[p[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Depth[a]&lt;Depth[b])swap(a,b);</span><br><span class="line"><span class="keyword">int</span> k=log2(Depth[a]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span>(Depth[a]==Depth[b])<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(Depth[a]-(<span class="number">1</span>&lt;&lt;i)&gt;=Depth[b])a=p[a][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==b)<span class="keyword">return</span> b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span>(p[a][i]!=<span class="number">-1</span>&amp;&amp;p[a][i]!=p[b][i]) &#123;</span><br><span class="line">a=p[a][i];</span><br><span class="line">b=p[b][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> Now,<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">Depth[Now]=depth;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;edges[Now].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> Next=edges[Now][i];</span><br><span class="line"><span class="keyword">if</span>(Next==father[Now])<span class="keyword">continue</span>;</span><br><span class="line">father[Next]=Now;</span><br><span class="line">Dfs(Next,depth+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sparse_Table2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)f[i][<span class="number">0</span>]=a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; (<span class="number">1</span>&lt;&lt;j)&lt;n; j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> L=f[i][j<span class="number">-1</span>],R=f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(Depth[L]&lt;Depth[R])f[i][j]=L;</span><br><span class="line"><span class="keyword">else</span> f[i][j]=R;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> Left,<span class="keyword">int</span> Right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=log2(Right-Left+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> L=f[Left][x],R=f[Right-(<span class="number">1</span>&lt;&lt;x)+<span class="number">1</span>][x];</span><br><span class="line"><span class="keyword">if</span>(Depth[L]&lt;Depth[R])<span class="keyword">return</span> L;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x=Get_Int(),y=Get_Int();</span><br><span class="line">AddEdge(x,y);</span><br><span class="line">AddEdge(y,x);</span><br><span class="line">&#125;</span><br><span class="line">father[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">Dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">Sparse_Table();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)a[i]=LCA(i,i+<span class="number">1</span>);</span><br><span class="line">Sparse_Table2();</span><br><span class="line">q=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=q; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x=Get_Int(),y=Get_Int();</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Query(x,y<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="D-cyy玩牌牌"><a href="#D-cyy玩牌牌" class="headerlink" title="D.cyy玩牌牌"></a><a href="http://94.191.85.166:8000/contest/4/problem/D" target="_blank" rel="noopener">D.cyy玩牌牌</a></h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>cyy打牌有个习惯，他很喜欢打顺子。</p><p>顺子的定义是，3至5张序号连续且不重复的扑克牌。</p><p>现在他有了一堆扑克牌，他想考考你，是否存在一种方案，在只打顺子的情况下，能把这些牌打完？</p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>首先需要注意到的是，$5$张以上的顺子都可以由$3,4,5$组成，所以对于顺子只需要要求它的长度大于$3$即可。<br>考虑差分，将区间减法转化为左端点减法与右端点加法。<br>差分后问题转化为正数与负数的匹配，利用左端点减一个数，右端点加同样的数，将差分序列全部变为$0$。<br>可以做一个匹配，但是写起来很复杂，可以乱搞一下简化代码。  </p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b[<span class="number">2</span>]&lt;<span class="number">0</span>||b[<span class="number">3</span>]&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+<span class="number">3</span>&lt;=n; i++) &#123;</span><br><span class="line">sum+=(b[i]&gt;<span class="number">0</span>?b[i]:<span class="number">0</span>)+(b[i+<span class="number">3</span>]&lt;<span class="number">0</span>?b[i+<span class="number">3</span>]:<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sum&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>; t&lt;=T; t++) &#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">a[i]=Get_Int();</span><br><span class="line">b[i]=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">b[n+<span class="number">1</span>]=-a[n];</span><br><span class="line"><span class="keyword">if</span>(Check())<span class="built_in">printf</span>(<span class="string">"Case #%d: Yes\n"</span>,t);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case #%d: No\n"</span>,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-ytrsk的键盘"><a href="#E-ytrsk的键盘" class="headerlink" title="E.ytrsk的键盘"></a><a href="http://94.191.85.166:8000/contest/4/problem/E" target="_blank" rel="noopener">E.ytrsk的键盘</a></h2><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>显然，每一个键位只对应一个字符。<br>首先，搜索是阶乘级别的，显然是不可能的。<br>动规？在确定一个位置后是有后效性的，无法划分阶段。<br>$1\le m\le20$，这一个条件告诉我们，可以用二进制状态压缩来表示当前键盘按键的状态。  </p><p>不妨考虑贡献，统计某个字符$i$下一个字符是$j$的总数，每一次确定一个键位，就增加这么多总数的贡献。这些贡献由所有已经确定了键位的字符到所有还没有确定键位的字符构成，每一个的贡献均为$1$。<br>这样计算贡献，与原题的绝对值之和等价。  </p><p>因此设置状态$f(S)$表示键位确定状态为$S$时的贡献，枚举子集进行转移即可。<br>另外，由于状态的设置问题，统计相邻字符的时候下一个字符和上一个字符均需要统计。<br>详见代码1，时间复杂度为$O(2^m·m^2)$。  </p><p>这个时间复杂度还可以进行优化，我们可以事先统计出$g(S,i)$表示$S$状态中的已确定字符与未确定字符$i$构成的贡献。<br>$g(S,i)$可以通过lowbit转移，从而将时间复杂度优化到$O(2^m·m)$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><p>代码一<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,cnt[<span class="number">25</span>][<span class="number">25</span>],f[<span class="number">1</span>&lt;&lt;<span class="number">20</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">cnt[s[i]-<span class="string">'a'</span>][s[i+<span class="number">1</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">cnt[s[i+<span class="number">1</span>]-<span class="string">'a'</span>][s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> S=<span class="number">1</span>; S&lt;(<span class="number">1</span>&lt;&lt;m); S++) &#123;</span><br><span class="line">f[S]=INT_MAX/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;m; j++)<span class="keyword">if</span>(((S&gt;&gt;i)&amp;<span class="number">1</span>)^((S&gt;&gt;j)&amp;<span class="number">1</span>))sum+=cnt[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)<span class="keyword">if</span>((S&gt;&gt;i)&amp;<span class="number">1</span>)f[S]=min(f[S],f[S^(<span class="number">1</span>&lt;&lt;i)]+sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,cnt[<span class="number">20</span>][<span class="number">20</span>],f[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],g[<span class="number">1</span>&lt;&lt;<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(i) (i&amp;(-i))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">cnt[s[i]-<span class="string">'a'</span>][s[i+<span class="number">1</span>]-<span class="string">'a'</span>]++;</span><br><span class="line">cnt[s[i+<span class="number">1</span>]-<span class="string">'a'</span>][s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> S=<span class="number">1</span>; S&lt;(<span class="number">1</span>&lt;&lt;m); S++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)<span class="keyword">if</span>(!((S&gt;&gt;i)&amp;<span class="number">1</span>))g[S][i]=g[S^lowbit(S)][i]+cnt[(<span class="keyword">int</span>)log2(lowbit(S))][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> S=<span class="number">1</span>; S&lt;(<span class="number">1</span>&lt;&lt;m); S++) &#123;</span><br><span class="line">f[S]=INT_MAX/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)<span class="keyword">if</span>(!((S&gt;&gt;i)&amp;<span class="number">1</span>))sum+=g[S][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)<span class="keyword">if</span>((S&gt;&gt;i)&amp;<span class="number">1</span>)f[S]=min(f[S],f[S^(<span class="number">1</span>&lt;&lt;i)]+sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="F-小马过河"><a href="#F-小马过河" class="headerlink" title="F.小马过河"></a><a href="http://94.191.85.166:8000/contest/4/problem/F" target="_blank" rel="noopener">F.小马过河</a></h2><h3 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h3><p>这显然是一个动态规划，首先不考虑方案数。<br>设置状态$f(x,y,0/1)$表示，河对岸有$x$条50kg的马，有$y$条100kg的马，船在河对岸还是在当前位置，此时的最少乘船次数。  </p><script type="math/tex; mode=display">f(x,y,1)=\min\{f(i,j,0)+1\}\quad,x\ge i,y\ge j</script><script type="math/tex; mode=display">f(x,y,0)=\min\{f(i,j,1)+1\}\quad,x\le i,y\le j</script><p>注意一下转移的条件，这个动规就完成了。  </p><p>然而并没有结束，怎么统计方案数呢？<br>我们用$g(x,y,0/1)$来表示方案数。<br>首先如果$f$在转移时发生了更新，$g$也应该重新更新。<br>如果$f$在转移时数据相同，$g$应该累加。<br>除此之外，由于相同体重的马是不一样的（带有标号的），还需要乘上对应的组合数，预处理一下杨辉三角即可。  </p><p>但是，这个动规的转移没有顺序性，不能使用递推来实现。<br>我们可以发现，虽然转移的阶段没有顺序性，但却有明显的层次，因此我们可以使用Bfs来转移动规，这也被称作记忆化搜索。（使用Dfs是错误的，想一想，为什么？）</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,K,a,b,f[<span class="number">55</span>][<span class="number">55</span>][<span class="number">2</span>];</span><br><span class="line">LL g[<span class="number">55</span>][<span class="number">55</span>][<span class="number">2</span>],C[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="keyword">bool</span> vst[<span class="number">55</span>][<span class="number">55</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,l;</span><br><span class="line">QueNode(<span class="keyword">int</span> xx=<span class="number">0</span>,<span class="keyword">int</span> yy=<span class="number">0</span>,<span class="keyword">int</span> ll=<span class="number">0</span>):x(xx),y(yy),l(ll) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;QueNode&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">g[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">vst[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">Q.push(QueNode(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span>(!Q.empty()) &#123;</span><br><span class="line">QueNode Now=Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">int</span> x=Now.x,y=Now.y;</span><br><span class="line"><span class="keyword">if</span>(Now.l==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x; i&lt;=a; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y; j&lt;=b; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>((i-x==<span class="number">0</span>&amp;&amp;j-y==<span class="number">0</span>)||(i-x)*<span class="number">50</span>+(j-y)*<span class="number">100</span>&gt;K)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(f[i][j][<span class="number">1</span>]&gt;f[x][y][<span class="number">0</span>]+<span class="number">1</span>) &#123;</span><br><span class="line">f[i][j][<span class="number">1</span>]=f[x][y][<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line">g[i][j][<span class="number">1</span>]=C[a-x][a-i]*C[b-y][b-j]%mod*g[x][y][<span class="number">0</span>]%mod;</span><br><span class="line"><span class="keyword">if</span>(!vst[i][j][<span class="number">1</span>]) &#123;</span><br><span class="line">vst[i][j][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">Q.push(QueNode(i,j,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(f[i][j][<span class="number">1</span>]==f[x][y][<span class="number">0</span>]+<span class="number">1</span>)g[i][j][<span class="number">1</span>]=(g[i][j][<span class="number">1</span>]+C[a-x][a-i]*C[b-y][b-j]%mod*g[x][y][<span class="number">0</span>]%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=x; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=y; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>((x-i==<span class="number">0</span>&amp;&amp;y-j==<span class="number">0</span>)||(i-x)*<span class="number">50</span>+(j-y)*<span class="number">100</span>&gt;K)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(f[i][j][<span class="number">0</span>]&gt;f[x][y][<span class="number">1</span>]+<span class="number">1</span>) &#123;</span><br><span class="line">f[i][j][<span class="number">0</span>]=f[x][y][<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">g[i][j][<span class="number">0</span>]=C[x][i]*C[y][j]%mod*g[x][y][<span class="number">1</span>]%mod;</span><br><span class="line"><span class="keyword">if</span>(!vst[i][j][<span class="number">0</span>]) &#123;</span><br><span class="line">vst[i][j][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">Q.push(QueNode(i,j,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(f[i][j][<span class="number">0</span>]==f[x][y][<span class="number">1</span>]+<span class="number">1</span>)g[i][j][<span class="number">0</span>]=(g[i][j][<span class="number">0</span>]+C[x][i]*C[y][j]%mod*g[x][y][<span class="number">1</span>]%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">K=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)Get_Int()==<span class="number">50</span>?a++:b++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=a; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=b; j++)f[i][j][<span class="number">0</span>]=f[i][j][<span class="number">1</span>]=INT_MAX/<span class="number">2</span>;</span><br><span class="line">C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; j++)C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">&#125;</span><br><span class="line">Dp();</span><br><span class="line"><span class="keyword">if</span>(f[a][b][<span class="number">1</span>]&lt;INT_MAX/<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d\n%lld\n"</span>,f[a][b][<span class="number">1</span>],g[a][b][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1\n0"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="G-Accepted"><a href="#G-Accepted" class="headerlink" title="G.Accepted!"></a><a href="http://94.191.85.166:8000/contest/4/problem/G" target="_blank" rel="noopener">G.Accepted!</a></h2><h3 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h3><p>签到题，没过的同学请扇自己一巴掌。  </p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vst[maxn],flag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">s=<span class="string">' '</span>+s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)<span class="keyword">if</span>(s[i]==<span class="string">'A'</span>&amp;&amp;s[i+<span class="number">1</span>]==<span class="string">'C'</span>) &#123;ans++;vst[i]=vst[i+<span class="number">1</span>]=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)<span class="keyword">if</span>(((s[i]==<span class="string">'A'</span>&amp;&amp;s[i+<span class="number">1</span>]==<span class="string">'A'</span>)||(s[i]==<span class="string">'C'</span>&amp;&amp;s[i+<span class="number">1</span>]==<span class="string">'C'</span>))&amp;&amp;!vst[i]&amp;&amp;!vst[i+<span class="number">1</span>])flag=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans+flag);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Round 2的题目总体而言较难，对有基础的学生区分度较好。&lt;br&gt;题目难度系数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A : 3&lt;/li&gt;
&lt;li&gt;B : 2&lt;/li&gt;
&lt;li&gt;C : 4&lt;/li&gt;
&lt;li&gt;D : 5&lt;/li&gt;
&lt;li&gt;E : 4&lt;/li&gt;
&lt;li&gt;F : 5&lt;/li&gt;
&lt;li&gt;G : 1&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ACM" scheme="https://blog.bill.moe/categories/ACM/"/>
    
    
      <category term="动态规划" scheme="https://blog.bill.moe/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="线段树" scheme="https://blog.bill.moe/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="最小生成树" scheme="https://blog.bill.moe/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="状态压缩" scheme="https://blog.bill.moe/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="比赛酱油记" scheme="https://blog.bill.moe/tags/%E6%AF%94%E8%B5%9B%E9%85%B1%E6%B2%B9%E8%AE%B0/"/>
    
      <category term="博弈论" scheme="https://blog.bill.moe/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="RMQ" scheme="https://blog.bill.moe/tags/RMQ/"/>
    
      <category term="LCA" scheme="https://blog.bill.moe/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>重大ACM社团市赛选拔赛 Round 1 题解</title>
    <link href="https://blog.bill.moe/CQU-Selection-2019-Round1/"/>
    <id>https://blog.bill.moe/CQU-Selection-2019-Round1/</id>
    <published>2019-12-08T06:02:50.000Z</published>
    <updated>2019-12-08T07:31:10.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Round 1的题目总体而言不难，对19级新生区分度较好，E题略难，C题区间动规无人攻破实属遗憾。<br>题目难度系数：</p><ul><li>A : 1</li><li>B : 1</li><li>C : 4</li><li>D : 2</li><li>E : 6</li><li>F : 2</li></ul><a id="more"></a><hr><h2 id="A-走马"><a href="#A-走马" class="headerlink" title="A.走马"></a><a href="http://94.191.85.166:8000/contest/2/problem/A" target="_blank" rel="noopener">A.走马</a></h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>使用Bfs扩展马的路径即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]= &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;,dy[]= &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,f[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">bool</span> vst[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;pii&gt; Q;</span><br><span class="line">Q.push(mp(x,y));</span><br><span class="line">vst[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!Q.empty()) &#123;</span><br><span class="line">pii Now=Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">8</span>; i++) &#123;</span><br><span class="line">pii Next=mp(Now.first+dx[i],Now.second+dy[i]);</span><br><span class="line"><span class="keyword">if</span>(Next.first&lt;<span class="number">1</span>||Next.first&gt;n||Next.second&lt;<span class="number">1</span>||Next.second&gt;m||vst[Next.first][Next.second])<span class="keyword">continue</span>;</span><br><span class="line">Q.push(Next);</span><br><span class="line">vst[Next.first][Next.second]=<span class="number">1</span>;</span><br><span class="line">f[Next.first][Next.second]=f[Now.first][Now.second]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">m=Get_Int();</span><br><span class="line">x=Get_Int();</span><br><span class="line">y=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)f[i][j]=<span class="number">-1</span>;</span><br><span class="line">f[x][y]=<span class="number">0</span>;</span><br><span class="line">Bfs();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;m; j++)<span class="built_in">printf</span>(<span class="string">"%d\t"</span>,f[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[i][m]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-Counting-Stars"><a href="#B-Counting-Stars" class="headerlink" title="B.Counting Stars"></a><a href="http://94.191.85.166:8000/contest/2/problem/B" target="_blank" rel="noopener">B.Counting Stars</a></h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给一个区间和宽度W，求区间中宽度为W子区间的最大权值和。</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>做一个前缀和，扫描一遍即可。<br>甚至有条件$P_i\le100000$，双指针都免了。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,w,a[maxn],sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">w=Get_Int();</span><br><span class="line"><span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x=Get_Int(),y=Get_Int();</span><br><span class="line">a[x]+=y;</span><br><span class="line">m=max(m,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+w<span class="number">-1</span>&lt;=m; i++)ans=max(ans,sum[i+w<span class="number">-1</span>]-sum[i<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="C-吸金石"><a href="#C-吸金石" class="headerlink" title="C.吸金石"></a><a href="http://94.191.85.166:8000/contest/2/problem/C" target="_blank" rel="noopener">C.吸金石</a></h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题竟然成了防AK题。（然而我写着写着就忘了自己的状态定义，似乎没资格说这句话）<br>首先，有几个结论是显然错误的，比如：</p><ol><li>浇水过程中，浇水的区间一定连续</li><li>每次选一个代价最小的浇水（局部贪心）</li></ol><p>常见的反例有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 1</span><br><span class="line">1 1000 1</span><br><span class="line">1 1 1</span><br><span class="line">1 1000 1</span><br></pre></td></tr></table></figure></p><p>那怎么办呢？虽然浇水的区间不一定连续，但总可以划分成若干个区间，我们不妨想到区间DP：<br>设置状态$f(i,j)$表示浇完区间$[i,j]$的花的最小代价。<br>现在考虑将两个区间合并在一起进行转移。<br>枚举断点$k$，给$k$浇水，将区间$[i,k-1]和[k+1,j]$合并起来。  </p><script type="math/tex; mode=display">f(i,j)=f(i,k-1)+f(k+1,j)+w_{i,j,k}</script><p>其中$w_{i,j,k}$表示当前区间$[i,j]$，给$k$浇水的代价。</p><p>时间复杂度$O(n^3)$</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,w,a[<span class="number">405</span>],b[<span class="number">405</span>],t[<span class="number">405</span>],f[<span class="number">405</span>][<span class="number">405</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">w=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">a[i]=Get_Int();</span><br><span class="line">b[i]=Get_Int();</span><br><span class="line">t[i]=<span class="built_in">ceil</span>(<span class="keyword">double</span>(Get_Int())/w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>; len&lt;=n; len++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+len<span class="number">-1</span>&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> j=i+len<span class="number">-1</span>;</span><br><span class="line">f[i][j]=INT_MAX/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=i; k&lt;=j; k++) &#123;</span><br><span class="line"><span class="keyword">int</span> l_cost=k<span class="number">-1</span>&gt;=i?f[i][k<span class="number">-1</span>]:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> r_cost=k+<span class="number">1</span>&lt;=j?f[k+<span class="number">1</span>][j]:<span class="number">0</span>;</span><br><span class="line">f[i][j]=min(f[i][j],l_cost+r_cost+t[k]*(a[k]+b[i<span class="number">-1</span>]+b[j+<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[<span class="number">1</span>][n]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="D-triangle"><a href="#D-triangle" class="headerlink" title="D.triangle"></a><a href="http://94.191.85.166:8000/contest/2/problem/D" target="_blank" rel="noopener">D.triangle</a></h2><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>如果两个三角形相交，他们的结果一定相同，可以把它们合并起来，并集又可以和其他三角形相交。<br>因此想到并查集，于是这道题就很简单了。<br>枚举两两三角形，利用并查集合并，并查集内维护一个最右端点即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,L[maxn],R[maxn],father[maxn],f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> (L[x]&lt;=L[y]&amp;&amp;R[x]&gt;=L[y]&amp;&amp;R[x]&lt;=R[y]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> father[x]==x?x:father[x]=Get(father[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx=Get(x),fy=Get(y);</span><br><span class="line"><span class="keyword">if</span>(fx!=fy) &#123;</span><br><span class="line">father[fx]=fy;</span><br><span class="line">f[fy]=max(f[fy],f[fx]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">L[i]=Get_Int();</span><br><span class="line">R[i]=Get_Int();</span><br><span class="line">f[i]=R[i];</span><br><span class="line">father[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line"><span class="keyword">if</span>(Check(i,j)||Check(j,i))Union(i,j);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[Get(i)]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-multiply"><a href="#E-multiply" class="headerlink" title="E.multiply"></a><a href="http://94.191.85.166:8000/contest/2/problem/E" target="_blank" rel="noopener">E.multiply</a></h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>有一颗有$n$个节点的树，树的根节点固定为$1$，节点$i$的父节点为$P_i$，并且节点上带有权值$c_i$。</p><p>现在需要对于每一个$1$到$m$中的数$x$求出：树中有多少个连通块的乘积为$x$</p><p>因为答案过大，只需要输出$\mod 998244353$之后的数即可</p><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>这是六道题中最难的一道题。<br>值得一提的是，数据太水了只判链也可以过。<br>首先这道题求连通块的信息，有点分治，点分树，边分治等经典做法。<br>在这里讲点分治的做法。<br>按照点分治的思路，提取出树的重心，考虑经过当前重心的连通块。<br>现在我们考虑乘积为$x$，这类似一个背包问题，有两种处理思路：</p><ol><li>自下而上统计信息，然后在重心处暴力合并或者启发式合并。</li><li>自上而下传递信息，然后再自下而上更新信息。</li></ol><p>对于连通块，一般采用第2种方式更为容易，第1种方式一般用于处理路径问题。<br>于是我们从重心向下访问子结点，每一个结点考虑转移子结点的方案数，这就类似一个背包问题。<br>预处理出每个数的约数表，这样我们可以在$O(nm\log n\log m)$的时间内完成本题。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>,maxm=<span class="number">4005</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,Core,Min,Size[maxn],Maxson[maxn],a[maxn];</span><br><span class="line">LL f[maxn][maxm],ans[maxm];</span><br><span class="line"><span class="keyword">bool</span> vst[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edges[maxn],d[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_Size</span><span class="params">(<span class="keyword">int</span> Now,<span class="keyword">int</span> father)</span> </span>&#123;</span><br><span class="line">Size[Now]=<span class="number">1</span>;</span><br><span class="line">Maxson[Now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> Next:edges[Now]) &#123;</span><br><span class="line"><span class="keyword">if</span>(Next==father||vst[Next])<span class="keyword">continue</span>;</span><br><span class="line">Get_Size(Next,Now);</span><br><span class="line">Size[Now]+=Size[Next];</span><br><span class="line">Maxson[Now]=max(Maxson[Now],Size[Next]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_Core</span><span class="params">(<span class="keyword">int</span> Now,<span class="keyword">int</span> father,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">Maxson[Now]=max(Maxson[Now],Size[num]-Size[Now]);</span><br><span class="line"><span class="keyword">if</span>(Maxson[Now]&lt;Min) &#123;</span><br><span class="line">Min=Maxson[Now];</span><br><span class="line">Core=Now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> Next:edges[Now]) &#123;</span><br><span class="line"><span class="keyword">if</span>(Next==father||vst[Next])<span class="keyword">continue</span>;</span><br><span class="line">Get_Core(Next,Now,num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> Now,<span class="keyword">int</span> fa,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v&gt;m)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)f[Now][i]=<span class="number">0</span>;</span><br><span class="line">f[Now][a[Now]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> Next:edges[Now]) &#123;</span><br><span class="line"><span class="keyword">if</span>(vst[Next]||Next==fa)<span class="keyword">continue</span>;</span><br><span class="line">Dfs(Next,Now,v*a[Next]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)tmp[j]=f[Now][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=a[Now]; j&lt;=m; j+=a[Now])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k:d[j/a[Now]])tmp[j]=(tmp[j]+f[Now][j/k]*f[Next][k]%mod)%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)f[Now][j]=tmp[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> Now)</span> </span>&#123;</span><br><span class="line">Min=n;</span><br><span class="line">Get_Size(Now,<span class="number">0</span>);</span><br><span class="line">Get_Core(Now,<span class="number">0</span>,Now);</span><br><span class="line">Now=Core;</span><br><span class="line">vst[Now]=<span class="number">1</span>;</span><br><span class="line">Dfs(Now,<span class="number">0</span>,a[Now]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)ans[i]=(ans[i]+f[Now][i])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> Next:edges[Now]) &#123;</span><br><span class="line"><span class="keyword">if</span>(vst[Next])<span class="keyword">continue</span>;</span><br><span class="line">Solve(Next);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;edges[x].push_back(y);edges[y].push_back(x);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line">m=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)AddEdge(Get_Int(),i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)a[i]=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++)<span class="keyword">if</span>(i%j==<span class="number">0</span>)d[i].push_back(j);</span><br><span class="line">Solve(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="F-fraction"><a href="#F-fraction" class="headerlink" title="F.fraction"></a><a href="http://94.191.85.166:8000/contest/2/problem/F" target="_blank" rel="noopener">F.fraction</a></h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>将分数转化为连分数</p><h3 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h3><p>题目竟然没给出$n$的范围！连分数表示会不会停不下来导致$n$很大呢？<br>不会，考虑一下，我们每一次的操作：除法，取模，交换分子分母<br>这一个过程是不是类似辗转相除？<br>其实这就是辗转相除，因此连分数永远有有限解，并且时间复杂度与求$\gcd$一样都是$\log$级别。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LL num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cal</span><span class="params">(LL x,LL y)</span> </span>&#123;</span><br><span class="line">LL gcd=__gcd(x,y);</span><br><span class="line">x/=gcd;</span><br><span class="line">y/=gcd;</span><br><span class="line">ans.push_back(x/y);</span><br><span class="line"><span class="keyword">if</span>(x%y==<span class="number">1</span>) &#123;</span><br><span class="line">ans.push_back(y);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cal(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=Get_Int();</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">ans.clear();</span><br><span class="line">LL a=Get_Int(),b=Get_Int();</span><br><span class="line">Cal(a,b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ans.size()<span class="number">-1</span>; i++)<span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans.back());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Round 1的题目总体而言不难，对19级新生区分度较好，E题略难，C题区间动规无人攻破实属遗憾。&lt;br&gt;题目难度系数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A : 1&lt;/li&gt;
&lt;li&gt;B : 1&lt;/li&gt;
&lt;li&gt;C : 4&lt;/li&gt;
&lt;li&gt;D : 2&lt;/li&gt;
&lt;li&gt;E : 6&lt;/li&gt;
&lt;li&gt;F : 2&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ACM" scheme="https://blog.bill.moe/categories/ACM/"/>
    
    
      <category term="并查集" scheme="https://blog.bill.moe/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="动态规划" scheme="https://blog.bill.moe/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="数学" scheme="https://blog.bill.moe/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="比赛酱油记" scheme="https://blog.bill.moe/tags/%E6%AF%94%E8%B5%9B%E9%85%B1%E6%B2%B9%E8%AE%B0/"/>
    
      <category term="Bfs" scheme="https://blog.bill.moe/tags/Bfs/"/>
    
      <category term="点分治" scheme="https://blog.bill.moe/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>「公告/悲报」评论回复邮件通知可能失效</title>
    <link href="https://blog.bill.moe/blog-info-1may/"/>
    <id>https://blog.bill.moe/blog-info-1may/</id>
    <published>2019-10-22T11:11:21.000Z</published>
    <updated>2019-10-22T12:32:25.740Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于Valine国内版加强了管理，要求应用绑定域名并备案（国外域名瑟瑟发抖），因此博客邮件通知可能会挂掉，请各位注意。  </p><p>另：应某网友建议，live2d添加了隐藏按钮。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Hexo" scheme="https://blog.bill.moe/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.bill.moe/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>「菜鸟的自我修养」线性代数笔记</title>
    <link href="https://blog.bill.moe/linear-algebra/"/>
    <id>https://blog.bill.moe/linear-algebra/</id>
    <published>2019-10-21T08:31:00.000Z</published>
    <updated>2019-12-25T13:39:04.750Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文记载了本菜鸟大学期间的线性代数笔记与总结（包括一些计算机延伸）。<br><div class="note warning">            <p>本文中的部分结论不给证明，证明请参考教材。</p>          </div></p><a id="more"></a><h1 id="一-行列式"><a href="#一-行列式" class="headerlink" title="一. 行列式"></a>一. 行列式</h1><h2 id="行列式的定义"><a href="#行列式的定义" class="headerlink" title="行列式的定义"></a>行列式的定义</h2><p>为了方便地表示$n$元一次方程组的解，行列式诞生了。<br>如二元一次方程组：</p><script type="math/tex; mode=display">\begin{cases}a_{11}x_1+a_{12}x_2=b_1 \\a_{21}x_1+a_{22}x_2=b_2\end{cases}</script><p>其解可表示为：</p><script type="math/tex; mode=display">x_1=\frac{b_1a_{22}-b_2a_{12}}{a_{11}a_{22}-a_{12}a_{21}},\quad x_2=\frac{b_2a_{11}-b_1a_{21}}{a_{11}a_{22}-a_{12}a_{21}}</script><p>以上解的分母部分相同，可将其表示为行列式：</p><script type="math/tex; mode=display">\left|\begin{array}{cccc}     a_{11} & a_{12} \\    a_{21} & a_{22} \\\end{array}\right|=a_{11}a_{22}-a_{12}a_{21}</script><p>分子部分也可以表示成行列式，原解可以转化为：</p><script type="math/tex; mode=display">x_1=\frac{    \left|    \begin{array}{cccc}         b_{1} & a_{12} \\        b_{2} & a_{22} \\    \end{array}    \right|}{    \left|    \begin{array}{cccc}         a_{11} & a_{12} \\        a_{21} & a_{22} \\    \end{array}    \right|},\quadx_2=\frac{    \left|    \begin{array}{cccc}         a_{11} & b_{1} \\        a_{21} & b_{2} \\    \end{array}    \right|}{    \left|    \begin{array}{cccc}         a_{11} & a_{12} \\        a_{21} & a_{22} \\    \end{array}    \right|}</script><p>由上，二阶行列式的计算方法即为主对角线元素乘积减去反对角线元素乘积。<br>同理可以构造三元一次方程组并定义三阶行列式：</p><script type="math/tex; mode=display">\left|\begin{array}{cccc}     a_{11} & a_{12} & a_{13} \\    a_{21} & a_{22} & a_{23} \\    a_{31} & a_{32} & a_{33}\end{array}\right|=a_{11}a_{22}a_{33}+a_{12}a_{23}a_{31}+a_{13}a_{21}a_{32}-a_{11}a_{23}a_{32}-a_{12}a_{21}a_{33}-a_{13}a_{22}a_{31}</script><p>我们可以从中找到规律并得到$n$阶行列式的定义。<br>$n$阶行列式可以表示为$n!$个$n$项元素（不同行或不同列）相乘的代数和。<br>如何确定每一个乘积前面的正负号呢？<br>我们将这$n$个元素按照行数排序，观察它们的列数。<br>若列数组成的排列的逆序数（逆序对的个数）为奇数，则前面为负号，反之为正号。</p><p><strong>定义：对于一个$n$行$n$列的矩阵，作和数$\sum\limits_{p_1p_2\cdots p_n}(-1)^ta_{1p_1}a_{2p_2}\cdots a_{np_n}$，这里的$p_1p_2\cdots p_n$是自然数$1,2,\cdots,n$的一个排列，$t$是这个排列的逆序数，共$P_n=n!$项求和，称上述和式为这个$n$行$n$列矩阵形成的$n$阶行列式，记为：</strong></p><script type="math/tex; mode=display">\left|\begin{array}{cccc}    a_{11} & a_{12} & \cdots & a_{1n} \\    a_{21} & a_{22} & \cdots & a_{2n} \\    \vdots & \vdots &          & \vdots \\    a_{n1} & a_{n2} & \cdots & a_{nn}\end{array}\right|=det(a_{ij})=\sum_{p_1p_2\cdots p_n}(-1)^ta_{1p_1}a_{2p_2}\cdots a_{np_n}</script><p>$n$阶行列式同样可以表示为$\sum\limits_{p_1p_2\cdots p_n}(-1)^ta_{p_11}a_{p_22}\cdots a_{p_nn}$</p><h2 id="特殊的行列式"><a href="#特殊的行列式" class="headerlink" title="特殊的行列式"></a>特殊的行列式</h2><h3 id="对角行列式"><a href="#对角行列式" class="headerlink" title="对角行列式"></a>对角行列式</h3><p>除了对角线上的元其它元全为$0$的行列式。</p><script type="math/tex; mode=display">D=\left|\begin{array}{cccc}    \lambda_1 &   &   & 0 \\      & \lambda_2 &   &   \\      &   & \ddots &   \\    0 &   &   & \lambda_n \\\end{array}\right|=\prod_{i=1}^n\lambda_i</script><h3 id="反对角行列式"><a href="#反对角行列式" class="headerlink" title="反对角行列式"></a>反对角行列式</h3><p>除了反对角线上的元其它元全为$0$的行列式。</p><script type="math/tex; mode=display">D=\left|\begin{array}{cccc}    0 &   &   & \lambda_1 \\      &   & \lambda_2 &   \\      & \cdots &   &   \\    \lambda_n &   &   & 0 \\\end{array}\right|=(-1)^{\frac{n(n-1)}2}\prod_{i=1}^n\lambda_i</script><h3 id="三角形行列式"><a href="#三角形行列式" class="headerlink" title="三角形行列式"></a>三角形行列式</h3><p>若行列式满足当$i\gt j$时，$a_{ij}=0$，则称行列式为<strong>上三角行列式</strong><br>若行列式满足当$i\lt j$时，$a_{ij}=0$，则行列式称为<strong>下三角行列式</strong><br>三角形行列式的值为对角线上元的乘积。</p><h2 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h2><h3 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h3><p>以对角线为对称轴，将行列式进行对称操作（行列互换，$a_{ij}\rightarrow a_{ji}$），转置后的行列式记作$D^{T}$，<strong>行列式值不变</strong>。<br>需要注意的是，转置并不是倒置。</p><script type="math/tex; mode=display">D=D^{T}</script><h3 id="互换行列"><a href="#互换行列" class="headerlink" title="互换行列"></a>互换行列</h3><p>互换行列式的两行或两列，<strong>行列式改变符号</strong>。<br>需要注意的是，这里与矩阵不同，矩阵在互换后其含义不变，而行列式会改变符号。<br>由此性质可以推导出，若行列式有相同的行或列，其值为$0$。</p><h3 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h3><p>行列式$D$的某一行或某一列都同乘一个数$k$后，<strong>行列式的值变为原来的$k$倍</strong>。<br>需要注意的是，这里与矩阵的数乘不同，矩阵数乘后每一个元均数乘。<br>由此可以对行列式进行提取公因数。</p><h3 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h3><p>行列式若某一行或某一列的元都表示为两数之和，即可进行分解。</p><script type="math/tex; mode=display">D=\left|\begin{array}{cccc}    a_{11} & \cdots & a_{1,j-1} & b_{1j}+c_{1j} & a_{1,j+1} & \cdots & a_{1n} \\    a_{21} & \cdots & a_{2,j-1} & b_{2j}+c_{2j} & a_{2,j+1} & \cdots & a_{2n} \\    \vdots &   & \vdots & \vdots & \vdots &   & \vdots \\    a_{n1} & \cdots & a_{n,j-1} & b_{nj}+c_{nj} & a_{n,j+1} & \cdots & a_{nn}\end{array}\right|\\=\left|\begin{array}{cccc}    a_{11} & \cdots & a_{1,j-1} & b_{1j} & a_{1,j+1} & \cdots & a_{1n} \\    a_{21} & \cdots & a_{2,j-1} & b_{2j} & a_{2,j+1} & \cdots & a_{2n} \\    \vdots &   & \vdots & \vdots & \vdots &   & \vdots \\    a_{n1} & \cdots & a_{n,j-1} & b_{nj} & a_{n,j+1} & \cdots & a_{nn}\end{array}\right|\\+\left|\begin{array}{cccc}    a_{11} & \cdots & a_{1,j-1} & c_{1j} & a_{1,j+1} & \cdots & a_{1n} \\    a_{21} & \cdots & a_{2,j-1} & c_{2j} & a_{2,j+1} & \cdots & a_{2n} \\    \vdots &   & \vdots & \vdots & \vdots &   & \vdots \\    a_{n1} & \cdots & a_{n,j-1} & c_{nj} & a_{n,j+1} & \cdots & a_{nn}\end{array}\right|</script><h3 id="加成"><a href="#加成" class="headerlink" title="加成"></a>加成</h3><p>把行列式的某一行或某一列的各元同乘一个数后加到另一行或另一列对应元上，<strong>行列式不变</strong>。</p><h2 id="行列式的展开"><a href="#行列式的展开" class="headerlink" title="行列式的展开"></a>行列式的展开</h2><p>在$n$阶行列式$D=det(a_{ij})$中，把元$a_{ij}$所在的第$i$行与第$j$列划去，剩下元按原来的相对位置不变形成的一个$n-1$阶行列式称为$D$中元$a_{ij}$的<strong>余子式</strong>，记为$M_{ij}$，称$A_{ij}=(-1)^{i+j}M_{ij}$为$a_{ij}$的<strong>代数余子式</strong>。  </p><script type="math/tex; mode=display">D=\sum_{k=1}^{n}a_{ik}A_{ik}=\sum_{k=1}^{n}a_{kj}A_{kj}\quad(i,j=1,2,\cdots,n)</script><p>可以推导出：</p><script type="math/tex; mode=display">\sum_{k=1}^na_{ik}A_{jk}=\sum_{k=1}^na_{ki}A_{kj}=0</script><p>以及类似分块矩阵的性质：</p><script type="math/tex; mode=display">\begin{aligned}&\left|\begin{array}{cccc}    a_{11} & \cdots & a_{1k} & 0 & \cdots & 0 \\    \vdots &   & \vdots & \vdots &   & \vdots \\    a_{k1} & \cdots & a_{kk} & 0 & \cdots & 0 \\    c_{11} & \cdots & c_{1k} & b_{11} & \cdots & b_{1r} \\    \vdots &   & \vdots & \vdots &   & \vdots \\    c_{r1} & \cdots & c_{rk} & b_{r1} & \cdots & b_{rr}\end{array}\right|\\&=\left|\begin{array}{cccc}    A_{kk} & 0 \\    C_{rk} & B_{rr}\end{array}\right|\\&=\left|A\right|\left|B\right|\\&=\left|\begin{array}{cccc}    a_{11} & \cdots & a_{1k} \\    \vdots &   & \vdots \\    a_{k1} & \cdots & a_{kk}\end{array}\right|\left|\begin{array}{cccc}    b_{11} & \cdots & b_{1k} \\    \vdots &   & \vdots \\    b_{k1} & \cdots & b_{kk}\end{array}\right|\end{aligned}</script><h2 id="范德蒙德（Vandermonde）行列式"><a href="#范德蒙德（Vandermonde）行列式" class="headerlink" title="范德蒙德（Vandermonde）行列式"></a>范德蒙德（Vandermonde）行列式</h2><script type="math/tex; mode=display">D_n=\left|\begin{array}{cccc}    1 & 1 & \cdots & 1 \\    x_1 & x_2 & \cdots & x_n \\    x_1^2 & x_2^2 & \cdots & x_n^2 \\    \vdots & \vdots &   & \vdots \\    x_1^{n-1} & x_2^{n-1} & \cdots & x_n^{n-1}\end{array}\right|=\prod_{n\ge i\gt j\ge1}(x_i-x_j)</script><p>可以使用行列式的展开证明</p><h2 id="手算行列式"><a href="#手算行列式" class="headerlink" title="手算行列式"></a>手算行列式</h2><h3 id="三角化方法"><a href="#三角化方法" class="headerlink" title="三角化方法"></a>三角化方法</h3><p>通过行列式的性质将行列式化为三角形行列式，对角线乘积得解。</p><h3 id="展开法"><a href="#展开法" class="headerlink" title="展开法"></a>展开法</h3><p>将某一行某一列尽可能化为$0$，利用行列式的展开计算低阶行列式。</p><h3 id="递归法（数学归纳法）"><a href="#递归法（数学归纳法）" class="headerlink" title="递归法（数学归纳法）"></a>递归法（数学归纳法）</h3><p>找出$D_n$与低阶行列式间的关系，然后进行递归。</p><h3 id="镶边法"><a href="#镶边法" class="headerlink" title="镶边法"></a>镶边法</h3><p>给行列式加上一行和一列，构成$D_{n+1}$，保证$D_{n+1}=D_n$。<br>或给行列式加上一行和一列，构成范德蒙德行列式，利用待定系数法求解。</p><h3 id="拆分法"><a href="#拆分法" class="headerlink" title="拆分法"></a>拆分法</h3><p>利用行列式可分解的性质对行列式进行拆分。</p><h3 id="行和或者列和相等的行列式"><a href="#行和或者列和相等的行列式" class="headerlink" title="行和或者列和相等的行列式"></a>行和或者列和相等的行列式</h3><script type="math/tex; mode=display">\begin{aligned}& \left|\begin{array}{cccc}    a & b & b & \cdots & b \\    b & a & b & \cdots & b \\    b & b & a & \cdots & b \\    \vdots & \vdots & \vdots &   & \vdots \\    b & b & b & \cdots & a\end{array}\right| \\= &\left|\begin{array}{cccc}    a+(n-1)b & b & b & \cdots & b \\    a+(n-1)b & a & b & \cdots & b \\    a+(n-1)b & b & a & \cdots & b \\    \vdots & \vdots & \vdots &   & \vdots \\    a+(n-1)b & b & b & \cdots & a\end{array}\right| \\= & [a+(n-1)b]\left|\begin{array}{cccc}    1 & b & b & \cdots & b \\    1 & a & b & \cdots & b \\    1 & b & a & \cdots & b \\    \vdots & \vdots & \vdots &   & \vdots \\    1 & b & b & \cdots & a\end{array}\right| \\= & [a+(n-1)b]\left|\begin{array}{cccc}    1 & b & b & \cdots & b \\    0 & a-b & 0 & \cdots & 0 \\    0 & 0 & a-b & \cdots & 0 \\    \vdots & \vdots & \vdots &   & \vdots \\    0 & 0 & 0 & \cdots & a-b\end{array}\right| \\= & [a+(n-1)b](a-b)^{n-1}\end{aligned}</script><h3 id="爪型行列式"><a href="#爪型行列式" class="headerlink" title="爪型行列式"></a>爪型行列式</h3><p>在$a_i\neq0$时有：</p><script type="math/tex; mode=display">\begin{aligned}D_{n+1}= &\left|\begin{array}{cccc}    a_0 & b_1 & b_2 & \cdots & b_n \\    c_1 & a_1 &  &  &  \\    c_2 &  & a_2 &  &  \\    \vdots &  &  & \ddots &  \\    c_n &  &  &  & a_n\end{array}\right| \\= &\left|\begin{array}{cccc}    a_0-\frac{b_1c_1}{a_1} & 0 & b_2 & \cdots & b_n \\    c_1 & a_1 &  &  &  \\    c_2 &  & a_2 &  &  \\    \vdots &  &  & \ddots &  \\    c_n &  &  &  & a_n\end{array}\right| \\= &\left|\begin{array}{cccc}    a_0-\frac{b_1c_1}{a_1}-\frac{b_2c_2}{a_2} & 0 & 0 & \cdots & b_n \\    c_1 & a_1 &  &  &  \\    c_2 &  & a_2 &  &  \\    \vdots &  &  & \ddots &  \\    c_n &  &  &  & a_n\end{array}\right| \\= &\left|\begin{array}{cccc}    a_0-\sum\limits_{i=1}^n\frac{b_ic_i}{a_i} & 0 & 0 & \cdots & 0 \\    c_1 & a_1 &  &  &  \\    c_2 &  & a_2 &  &  \\    \vdots &  &  & \ddots &  \\    c_n &  &  &  & a_n\end{array}\right|= & (a_0-\sum\limits_{i=1}^n\frac{b_ic_i}{a_i})\prod_{i=1}^na_i\end{aligned}</script><h3 id="三对角行列式"><a href="#三对角行列式" class="headerlink" title="三对角行列式"></a>三对角行列式</h3><script type="math/tex; mode=display">D_n=\left|\begin{array}{cccc}    a & b &  &  &  \\    c & a & b &  &  \\      & c & a & \ddots &  \\      &   & \ddots & \ddots & b \\      &  &  & c & a\end{array}\right|</script><p>按第一行展开得：</p><script type="math/tex; mode=display">D_n=aD_{n-1}-bcD_{n-2}\quad(n\gt2)</script><p>其中$D_1=a,D_2=a^2-bc$<br>然后使用数列知识求解通解</p><h2 id="使用计算机求行列式"><a href="#使用计算机求行列式" class="headerlink" title="使用计算机求行列式"></a>使用计算机求行列式</h2><h3 id="使用定义计算"><a href="#使用定义计算" class="headerlink" title="使用定义计算"></a>使用定义计算</h3><p>枚举每一个排列，计算逆序数与元乘积，时间复杂度为$O(n\cdot n!)$。</p><h3 id="展开行列式计算"><a href="#展开行列式计算" class="headerlink" title="展开行列式计算"></a>展开行列式计算</h3><p>选中一行或一列，用其余行或列将其消至仅剩一个非零元，消去该元所在行列，变为$n-1$阶行列式递归计算。<br>较难单纯地用计算机实现，用计算机可以实现的最好方法同样也是下面一种方法。<br>理论时间复杂度为$O(n!^3)$（存疑）。</p><h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><p>利用高斯消元，将行列式整理为三角形行列式或对角行列式，计算对角线的乘积即可。<br>时间复杂度$O(n^3)$。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文记载了本菜鸟大学期间的线性代数笔记与总结（包括一些计算机延伸）。&lt;br&gt;&lt;div class=&quot;note warning&quot;&gt;
            &lt;p&gt;本文中的部分结论不给证明，证明请参考教材。&lt;/p&gt;
          &lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="https://blog.bill.moe/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="学习笔记" scheme="https://blog.bill.moe/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Bill Yang 代码规范</title>
    <link href="https://blog.bill.moe/code-standard/"/>
    <id>https://blog.bill.moe/code-standard/</id>
    <published>2019-10-17T11:23:34.000Z</published>
    <updated>2019-10-21T08:33:29.925Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本代码规范为笔者所用的 C/C++ 代码编写格式规范，参考了 Java 的代码标准排版模式，并总结于此。</p><a id="more"></a><h2 id="换行与空格"><a href="#换行与空格" class="headerlink" title="换行与空格"></a>换行与空格</h2><p>笔者习惯在两段<strong>意义不同的代码块间</strong>进行换行。<br>并遵循<strong>不随意添加空行</strong>的原则。<br>如在头文件与宏与<code>using</code>段间添加空行，在函数间添加空行。<br>以下是范例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">Get_Int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LL num=<span class="number">0</span>,bj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> x=getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(x)) &#123;<span class="keyword">if</span>(x==<span class="string">'-'</span>)bj=<span class="number">-1</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(x)) &#123;num=num*<span class="number">10</span>+x-<span class="string">'0'</span>;x=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> num*bj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>,K=<span class="number">31</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Linear_Bases</span> &#123;</span></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125; null;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line">LL a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> left,right;</span><br><span class="line">Linear_Bases lb;</span><br><span class="line">&#125; tree[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls index&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs index&lt;&lt;1|1</span></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> Left,<span class="keyword">int</span> Right)</span> </span>&#123;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>注：上述代码中宏未缩进为显示bug。</em></p><p>另，关于类与结构体中的成员函数，期间可以添加空行（提高可读性），也可以不添加空行（保证紧凑性），这里没有严格规范。</p><p>空格同样是用于提高代码可读性的。</p><p>正文与左大括号间添加空格。</p><blockquote><p>比较：左小括号与左中括号前不添加空格。</p></blockquote><p><strong>严禁在代码中添加大量无意义空格与空行。</strong>  </p><p>关于它们的使用，接下来的内容会详细描述。</p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br></pre></td></tr></table></figure><p>多个头文件需要根据头文件的长度进行<strong>降序或升序排列</strong>（一般使用降序排列）</p><p>C++的代码在没有必要时，不使用<code>.h</code>结尾的头文件。<br>C的代码在没有必要时，不使用<code>c</code>开头的头文件。  </p><p>C++的代码推荐使用以下代码引用头文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>除上面一段以外，不推荐调用没有使用的头文件。  </p><p><strong>头文件间不添加空行与空格</strong></p><h2 id="宏与别名定义"><a href="#宏与别名定义" class="headerlink" title="宏与别名定义"></a>宏与别名定义</h2><p>一般，将宏与别名定义在头文件的下方，代码正文的上方。<br>全局宏与非自定义宏，请遵循上述原则。<br>特殊情况：</p><ol><li>仅在某个代码块使用到的宏与别名，可以在代码块上部定义，位于代码块正文上方，代码块变量定义下方。  </li><li>条件编译开关等编译相关宏不遵循以上原则，若无必要的位置，尽量置于头文件上方。</li></ol><p>在代码块中的宏，保持<strong>代码缩进</strong>。<br>宏与别的代码块间，添加空行。</p><p>如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OnlineJudge</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Balance_Tree</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125; tree[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls tree[x].child[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs tree[x].child[1]</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"debugging"</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="代码块及命名空间"><a href="#代码块及命名空间" class="headerlink" title="代码块及命名空间"></a>代码块及命名空间</h2><p>支持的代码块格式有以下两种：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//这是代码缩进</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="built_in">puts</span>(<span class="string">"..."</span>);&#125; <span class="comment">//这里没有缩进</span></span><br></pre></td></tr></table></figure><p>使用命名空间的时候，在使用的代码块前添加：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> xxx;</span><br></pre></td></tr></table></figure></p><p>特别地，在使用std的时候，将代码提前到头文件后，宏定义与变量定义前。</p><p>在编写命名空间时，添加左括号前的空格与代码缩进。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> name1 &#123;</span><br><span class="line"><span class="comment">//这是代码缩进</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> name1;</span><br></pre></td></tr></table></figure></p><p>命名空间应遵循黑箱原则，即：命名空间所使用的变量与常量均应在命名空间内定义，命名空间使用到的外部量只能通过传参方式完成。</p><p>命名空间内应与命名空间外遵循同样的原则。</p><h2 id="结构体-类"><a href="#结构体-类" class="headerlink" title="结构体/类"></a>结构体/类</h2><p><em>在OI中，我们常常使用结构体实现简易类。</em>  </p><p>遵循黑箱原则。</p><p>结构体类似命名空间，特别的，结构体内的成员函数间可不添加空行。</p><p>类中包含的<code>public</code>，<code>private</code>等关键词应保持缩进，与成员变量或函数间不添加空行，但在不同的关键词间应保持空行，如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increaseAge</span><span class="params">()</span> </span>&#123;age++;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>关于重载，在符号前后添加空格，尽量使用常量引用传参，如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Matrix <span class="keyword">operator</span> + (<span class="keyword">const</span> Matrix &amp;b) &#123;</span><br><span class="line">Matrix c=*<span class="keyword">this</span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="引用符-amp"><a href="#引用符-amp" class="headerlink" title="引用符&amp;"></a>引用符&amp;</h2><p><code>&amp;</code>一般添加在变量名前：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;x=y;</span><br></pre></td></tr></table></figure></p><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>传参可使用三种方式传参，格式分别如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span></span>;</span><br></pre></td></tr></table></figure></p><p>逗号前后不添加空格。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>非<code>void</code>函数需要保证函数必定有退出出口，即该函数在任意情况下都能退出。</p><p>函数的两种格式如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="if-else嵌套"><a href="#if-else嵌套" class="headerlink" title="if-else嵌套"></a>if-else嵌套</h2><p>保持代码缩进。<br>大括号与正文间添加空格。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另一种格式：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"3"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"4"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>在分号之后添加一个空格，不添加其他任何空格。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++,x++) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(; i&lt;=n; i++) &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(; i&lt;=n; ) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>若仅有限制条件的循环，不建议使用for循环。</p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>不添加多余空格。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(x) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果想到新内容还会更新的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本代码规范为笔者所用的 C/C++ 代码编写格式规范，参考了 Java 的代码标准排版模式，并总结于此。&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="https://blog.bill.moe/categories/OI/"/>
    
    
      <category term="学习笔记" scheme="https://blog.bill.moe/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="科普" scheme="https://blog.bill.moe/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>「有趣的数学」神奇的自然底数$e$</title>
    <link href="https://blog.bill.moe/magical-e/"/>
    <id>https://blog.bill.moe/magical-e/</id>
    <published>2019-09-04T02:34:53.000Z</published>
    <updated>2019-12-03T12:06:24.641Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有关于自然底数$e$的概念我们是在学习基本初等函数时了解的，可惜的是，高中教材并没有给我们详细的阐述有关$e$的概念与优美的性质，大家普遍只知道它是一个无理数。<br>于是我们常常听到这样的话：“常用底数不常用，自然底数不自然。”<br>那么为什么$10$被称为常用底数，$e$被称为自然底数呢？<br>不要急，请容我娓娓道来。<br><a id="more"></a></p><h2 id="对数的发明"><a href="#对数的发明" class="headerlink" title="对数的发明"></a>对数的发明</h2><blockquote><p>16、17世纪之交，天文学极速发展，但由于天文学数字总是非常大，计算起来很不方便，因此人们迫切的想要找到一种简化数字计算的方法。<br>天文学家约翰·纳皮尔为了简化运算发明了对数，最初的定义是通过运动学阐述的，后来与朋友布里格斯商定，使$1$的对数为$0$，$10$的对数为$1$，这样就得到了以$10$为底的常用对数。</p></blockquote><p>我们发现，之所以称$10$为常用底数正是因为它被广泛运用到天文学中。</p><p>值得一提的是，我们都知道对数与指数是互逆关系，但对数比指数的发明更早，直到18世纪欧拉才发现了它们的互逆关系，这也成为了数学史上的佳话。</p><h2 id="e-的发现"><a href="#e-的发现" class="headerlink" title="$e$的发现"></a>$e$的发现</h2><p>我们介绍了对数的发明，那么自然底数是如何被发现的呢？神奇的是，自然底数的发现却与对数没有关系。<br>在17世纪末，瑞士数学家伯努利注意到了一个有趣的现象：当$x$越大时，$\Big(1+\frac1x\Big)^x$将会越接近某个固定的数：</p><script type="math/tex; mode=display">\Big(1+\frac1{100}\Big)^{100}\approx 2.70481</script><script type="math/tex; mode=display">\Big(1+\frac1{1000}\Big)^{1000}\approx 2.71692</script><script type="math/tex; mode=display">\Big(1+\frac1{10000}\Big)^{10000}\approx 2.71815</script><p>18世纪欧拉（没错又是欧拉）仔细研究了这个问题，并第一次使用字母$e$来表示当$x$无穷大时$\Big(1+\frac1x\Big)^x$的值，即：</p><script type="math/tex; mode=display">\lim_{x\rightarrow\infty}\Big(1+\frac1x\Big)^x=e</script><p>欧拉不仅求出了$e\approx2.718$，还证明了$e$是无理数。<br>那么$e$究竟有什么神奇的性质呢？</p><h2 id="神奇的-e"><a href="#神奇的-e" class="headerlink" title="神奇的$e$"></a>神奇的$e$</h2><h3 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h3><p>在高二我们会学习到指数函数的导数。</p><script type="math/tex; mode=display">(e^x)'=e^x</script><p>即$e^x$的导数是他的本身。<br>正因为有这样的性质，故指数函数在我们现实世界中具有重要作用。<br>当我们涉及到一个量的变化与自身大小相关的问题时，就往往需要引入指数函数或对数函数。</p><h3 id="连续复利公式"><a href="#连续复利公式" class="headerlink" title="连续复利公式"></a>连续复利公式</h3><p>假设有一家银行，年利率是$5\%$，并且每时每刻都在结算利息。<br>如果我们存入$1w$元，下一年我们就可以获得$500$元的利息，但这并不是能让我们获得最大收益的方法。<br>我们可以半年后取出利息，再把本金和利息重新作为本金计算，这样我们下半年可以获得$(1w+250)\times2.5\%=256.25$元的利息，也就是说我们最后的总利息是$506.25$元。<br>如果我们一个季度取出一次利息，那么获得的利息会更多。<br>随着我们逐渐缩短我们存取的间隔，利益会越来越大，当我们将存取的间隔缩短到无穷小时，获得的利益最大，此时就是连续复利。<br>可惜的是，我们并不能通过这样的方式赚到很多的钱，因为缩短间隔过程中利息的增多是收敛的，而连续复利就是它们的极限。<br>那么我们究竟能赚到多少钱呢？<br>设本金是$p_0$，年利率是$i$，每年的结算期数是$m$（每年存取的次数）。</p><script type="math/tex; mode=display">p_{nm}=p_0(1+\frac im)^{mn}</script><p>当$m\rightarrow\infty$时：</p><script type="math/tex; mode=display">p_n=\lim_{m\rightarrow\infty}p_0(1+\frac im)^{mn}=p_0\lim_{m\rightarrow\infty}[(1+\frac im)^{\frac mi}]^{ni}=p_0e^{ni}</script><p>上述公式即是连续复利公式。<br>当年利率是$5\%$，我们通过连续复利可以得到的利息约为$512.7$元，可见增加的利益也并不可观。</p><h3 id="e-x-的泰勒展开"><a href="#e-x-的泰勒展开" class="headerlink" title="$e^x$的泰勒展开"></a>$e^x$的泰勒展开</h3><p>对$e^x$<a href="/taylor-series-notes/">泰勒展开</a>，得到：</p><script type="math/tex; mode=display">e^x=\sum_{i=0}^{\infty}\frac{x^i}{i!}</script><p>这个公式又被称为麦克劳林公式。</p><h3 id="复分析下的欧拉公式"><a href="#复分析下的欧拉公式" class="headerlink" title="复分析下的欧拉公式"></a>复分析下的欧拉公式</h3><p>我们先来看看欧拉恒等式：</p><script type="math/tex; mode=display">e^{i\pi}+1=0</script><p>它是数学里最令人着迷的公式之一，它将数学里最重要的几个常数联系到了一起：两个超越数：自然底数$e$，圆周率$π$，两个单位：虚数单位$i$和自然数的单位$1$，以及数学里常见的$0$。因此，数学家们评价它是“上帝创造的公式，我们只能看它而不能理解它。”<br>欧拉恒等式是复分析下的欧拉公式的一个特例，欧拉公式如下：</p><script type="math/tex; mode=display">e^{ix}=\cos x+i\sin x</script><p>当代入$x=\pi$时即得到欧拉恒等式。<br>我们在<a href="/fast-fourier-transform-notes/">傅里叶变换</a>中提到过这一个欧拉公式，它使我们可以通过函数的方式来描述一个复数。<br>现在要介绍的是欧拉公式的推导：<br>我们将麦克劳林公式中的$x$替换为$ix$，即可得到：</p><script type="math/tex; mode=display">\begin{aligned}e^x&=1+ix+\frac{(ix)^2}{2!}+\frac{(ix)^3}{3!}+\frac{(ix)^4}{4!}+\cdots \\&=1+ix-\frac{x^2}{2!}-\frac{ix^3}{3!}+\frac{x^4}{4!}+\cdots\end{aligned}</script><p>我们把不含$i$的放一边，含$i$的放在另一边，则可以得到：</p><script type="math/tex; mode=display">\begin{aligned}e^x&=(1-\frac{x^2}{2!}+\frac{x^4}{4!}-\frac{x^6}{6!}+\cdots)+i(x-\frac{x^3}{3!}+\frac{x^5}{5!}-\cdots) \\&=\cos x+i\sin x\end{aligned}</script><h3 id="杨辉三角（摘自-Matrix67-的博客）"><a href="#杨辉三角（摘自-Matrix67-的博客）" class="headerlink" title="杨辉三角（摘自 Matrix67 的博客）"></a>杨辉三角（摘自 Matrix67 的博客）</h3><p>你相信吗，杨辉三角里竟然也有自然底数 e 的身影。2012 年， Harlan Brothers 发现了杨辉三角中的一个有趣的事实。不妨把杨辉三角第$n$行的所有数之积记作$s_n$，那么随着$n$的增加，$\frac{s_ns_{n+2}}{s_{n+1}^2}$会越来越接近$e\approx 2.718$。事实上，我们有：</p><script type="math/tex; mode=display">\lim_{n\rightarrow\infty}\frac{s_ns_{n+2}}{s_{n+1}^2}=e</script><p>这是为什么呢？ John Baez 在<a href="http://johncarlosbaez.wordpress.com/2014/02/12/triangular-numbers/" target="_blank" rel="noopener">这个网页</a>上给出了一个漂亮的解释。</p><p><img src="/magical-e/1.png" alt></p><p>首先，让杨辉三角 (A) 里面的每个数都除以它左下角的那个数，于是得到了图 (B) 所示的三角形数阵。你会发现，这个数阵里有一个很明显的模式，即第$n$行的所有数分母都是$n$，分子则分别是$n,n-1,\ldots,2,1$。这并不是巧合。这是因为：</p><script type="math/tex; mode=display">\frac{C_m^k}{C_{m+1}^k}=\frac{\frac{m!}{k!(m-k)!}}{\frac{(m+1)!}{k!(m-k+1)!}}=\frac{m-k+1}{m+1}</script><p>接下来，让图 (B) 里的所有数都除以它右下角的那个数，于是得到了图 (C) 所示的三角形数阵。容易看出，这个数阵第$n$行的所有$n$个数应该都是$\frac{n+1}{n}=1+\frac1n$ ，它们乘起来等于$(1+\frac1n)^n$。随着$n$的增加，这个数会越来越接近$e$。最后，让我们追溯一下图 (C) 中每个数的来源。图 (C) 中第$n$行的每个数都等于图 (B) 中第$n$行的某个数除以第$n+1$行的某个数，进而等于图 (A) 中第$n$行的某个数除以第$n+1$行的某个数的结果，除以第$n+1$行的某个数除以第$n+2$行的某个数的结果。因此，图 (C) 中第$n$行的所有数乘起来，结果正是$\frac{s_ns_{n+2}}{s_{n+1}^2}$。</p><p>我们称$e$为自然底数，正是因为它有这些神奇的性质，就像是自然创造出来的一个神奇常数。<br>也正是如此，$e$被广泛运用到数学和信息学之中，欢迎读者补充以上内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有关于自然底数$e$的概念我们是在学习基本初等函数时了解的，可惜的是，高中教材并没有给我们详细的阐述有关$e$的概念与优美的性质，大家普遍只知道它是一个无理数。&lt;br&gt;于是我们常常听到这样的话：“常用底数不常用，自然底数不自然。”&lt;br&gt;那么为什么$10$被称为常用底数，$e$被称为自然底数呢？&lt;br&gt;不要急，请容我娓娓道来。&lt;br&gt;
    
    </summary>
    
      <category term="科普" scheme="https://blog.bill.moe/categories/%E7%A7%91%E6%99%AE/"/>
    
    
      <category term="科普" scheme="https://blog.bill.moe/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>近期香港机场相关个人评论</title>
    <link href="https://blog.bill.moe/HongKongAirline/"/>
    <id>https://blog.bill.moe/HongKongAirline/</id>
    <published>2019-08-14T07:00:46.000Z</published>
    <updated>2019-08-18T01:20:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>众所周知，香港近期发生了严重的骚乱，然而不巧的是，本人去日本旅行刚好往返均需要在香港转机，因此笔者目睹了香港机场的状况并持续关注，现在将我的经历与评论记录在此。</p><a id="more"></a><p>本人的预定行程如下：<br><img src="/HongKongAirline/0.png" alt><br>国际航班需要提前三小时到达机场，因此我们5点钟就要到达机场，4点钟起床，妙啊。<br><img src="/HongKongAirline/1.jpg" alt><br>HX497顺利起飞并达到香港机场。<br><img src="/HongKongAirline/2.jpg" alt><br><img src="/HongKongAirline/3.jpg" alt><br><img src="/HongKongAirline/4.jpg" alt><br>抵达香港机场后，需要机场巴士将我们载到候机厅，我们等待了1个小时左右，原因是：“机场繁忙”<br>由于距离下午5点钟飞大阪的航班还有相当长的一段时间，经过耐心等候后开始办理转机手续，就在这时，问题出现了，8月5日飞往大阪的航班HX612取消。<br>为什么航班会取消呢？翻看新闻后发现：<br><img src="/HongKongAirline/4.5.png" alt><br>计划8月5日开始罢工？真巧，撞车了。<br>港航工作人员告诉我们，需要乘坐机场的小火车到达客运大楼并询问他们处理方法，而客运大楼港航前台工作人员告知我们需要出海关并在海关外出票柜台办理改签。<br>于是呢，我们就只有出海关了。当我们终于找到改签柜台时，发现了柜台盛况：<br><img src="/HongKongAirline/5.jpg" alt><br>（照相时已经排队2小时，排队的大概有数百人）<br>这是我至今为止排过的最长的队（然而不久就被C96的排队规模突破记录了）<br>香港航空仅有3个柜台在服务中，然而他们一个人一个人接待，改签，道歉，实属不易。这里我要吹爆港航，虽然港航是一家仅有34架空客的公司，但是香港航空的员工们尽职尽责，<a href="https://baijiahao.baidu.com/s?id=1641714847066448721&amp;wfr=spider" target="_blank" rel="noopener">态度明确</a>，全力帮助乘客解决问题。反观隔壁国泰航空，煽动罢工暴乱，让其他航空公司帮他们擦屁股。<br>经过与港航小姐姐的协调后，我们改签至第二天的航班（仍然是HX612，但变成了一架小飞机），但是仍然不知道改签航班是否会取消，以下是港航小姐姐的笔迹：<br><img src="/HongKongAirline/7.jpg" alt><br>因此我们只好改变行程，并在机场度过一晚（为什么不出机场找酒店？我敢去吗）。为了保持联络，我们需要找到充电插座，然而所有的机场充电插座都被占用了，无奈之下，我们只好等待麦当劳的充电座位出现空位。<br>当天，示威游行群众就在我们楼下，与我们所处地点之间完全没有障碍。<br><img src="/HongKongAirline/6.jpg" alt><br>于是我们在麦当劳度过了难忘的一晚，原计划是轮流睡觉照看行李，结果变成了两人一起看权游然后压着包睡觉但是睡不着，最终我们顺利完成了1小时精致睡眠然后继续待机（看权游）。<br>香港机场这里的吃喝都比较贵，所以我们早中晚都是吃的麦当劳（稍微便宜一点），我们总共吃了5顿麦当劳，吃到我肚子不舒服，整个人都不好了。<br><img src="/img/sentence/hyc10.png" alt><br>8月6日下午2点，我们顺利拿到了登机牌。<br><img src="/HongKongAirline/8.jpg" alt><br>今天示威的群众似乎稍微消停了会儿，于是我们顺利登机并到达大阪。<br><img src="/HongKongAirline/9.jpg" alt><br>值得一提的是，与我们一起从重庆出发并在香港转机前往大阪的还有一个（看似）教育机构组织的游学，他们穿着蓝色T恤。据了解，他们乘坐第一天晚上前往东京的飞机离开了，然而我们就没这么幸运了，酒店与行程是已经预定好了的，我们只能前往大阪（同时第一天的行程还泡汤了）。<br>幸运的是，第二天的行程没有泡汤，并顺利地听到了 ほんまに（关西话）。</p><p>接下来就是在霓虹度过的愉快的一周。</p><p>然后8月13日返程，此时HK仍然很不安稳，我们考虑过其他直飞航班，但是从东京成田直飞重庆机票价格上万，于是放弃了。<br>接下来发生的事非常精彩。<br><img src="/HongKongAirline/10.jpg" alt><br>我们于成田空港顺利起飞并到达香港，咨询香港航空后得到需要在起飞3小时前才能确认航班是否取消，目前取消的航班仅有几个。<br>但当我们等到下午时，其他网友告诉我们航班全部取消了。<br><img src="/HongKongAirline/11.jpg" alt><br><img src="/HongKongAirline/12.jpg" alt><br>然而此时机场中我们的公示牌情况为：<br><img src="/HongKongAirline/13.jpg" alt><br>确实取消了一些航班，但并未全部取消，工作人员告知我们目前一切正常，航班并未取消，因此我认为可能是假新闻，于是没在意太多，5点钟左右时，我乘坐小火车前往客运大楼吃晚饭（因为转机候机厅没有餐厅），行李由同行朋友照看。<br>当我吃完饭准备返回候机厅时问题出现了，我回不去了。需要出示登机牌才能进入候机厅，然而我们的航班尚不能打印登机牌，而且我什么都没有带过来。<br>于是我只好拜托我的同行朋友把行李提过来并在客运大楼打印登机牌。<br>此时我们航班的登机口仍未确定，并且航班延误到了10点20分起飞，就在这时我看到了<a href="http://www.bilibili.com/video/av63487681?share_medium=android&amp;share_source=qq&amp;bbid=RSZDJUYnFXFJcBUnWydbYlpiW24PPAw5DjoNinfoc&amp;ts=1565702723188" target="_blank" rel="noopener">一则新闻</a>，视频中老外被围堵的地方，不就是我们前往霓虹时吃麦当劳的地方吗？！<br>我感到了香港机场的危险，还好我们此时在客运大楼海关内部最深处的候机厅，刚刚去吃饭的时候我发现有许多警察在海关待机，至少我们现在是比较安全的。<br>随后我们的航班取消了。<br><img src="/HongKongAirline/14.jpg" alt><br>有许多人围堵了香港航空的柜台，工作人员表示他们现在也不清楚情况，5分钟前才知道取消的消息，他们正在打电话确认情况。<br>有几位游客不耐烦地怒吼：“我们已经等了几个小时了，要取消为什么不早点说？”为他们的愚蠢我感到非常地遗憾。然而有明白事理的群众指责这些人耐心点，也有更惨的告诉他们自己已经等了两三天了。<br>港航工作人员随后告知我们这个公示屏幕显示的是假消息，是为了展示给示威群众看好让他们停止闹事，其实航班并没有取消（但仍有可能会取消）。<br>不久，我们的航班登机口确定了，于是航班取消的可能性大大降低了。<br><img src="/HongKongAirline/15.jpg" alt><br>大约十点钟的时候，我们发现飞机已经到达登机口，正在加油。<br><img src="/HongKongAirline/16.jpg" alt><br>不久航班开始值机，我们大约于10点45分起飞。<br><img src="/HongKongAirline/17.jpg" alt><br>并大约于0点30分到达重庆江北机场，过海关，结束了我的旅程。</p><p><strong>后记</strong><br>这篇文章我本来不准备发布的，怕影响之后航班的乘客。<br>然而目前香港机场已经取得临时禁制权，只有持有24小时内登机牌以及相关证件的乘客才能进入客运大楼，所有航班已恢复正常，于是我决定把这篇文章发布出来。<br>香港机场，香港航空，你们很棒，加油！<br>对于隔壁的国泰航空，我只想说，No zuo No die。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，香港近期发生了严重的骚乱，然而不巧的是，本人去日本旅行刚好往返均需要在香港转机，因此笔者目睹了香港机场的状况并持续关注，现在将我的经历与评论记录在此。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://blog.bill.moe/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://blog.bill.moe/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>去日本啦</title>
    <link href="https://blog.bill.moe/jp-journey/"/>
    <id>https://blog.bill.moe/jp-journey/</id>
    <published>2019-08-03T15:07:31.000Z</published>
    <updated>2019-08-14T06:57:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>标题翻译：将会长期咕咕咕。<br><a id="more"></a></p><style type="text/css">    /*给网页添加 黑白滤镜*/    html{        /*兼容FF*/        filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");        /*兼容IE内核*/        filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);        /*兼容其它，谷歌之类的*/        -webkit-filter: grayscale(1);    } </style><div class="note error">            <p>愿逝者安息。<br><img src="/img/death.jpeg" alt></p>          </div><p>本人计划于 2019/08/05 ~ 2019/08/13 在日本国度过愉快的一周。<br>计划前往参观环球影城，富士山，给京阿尼献花，国立博物馆，秋叶原，参加C96。</p><p>作为咕咕咕的补偿，发一个福利吧。<br>成功猜中我的航班，就可以获得神秘礼品，期限为 2019/08/15 之前。<br>猜中部分即可获三等奖，猜中单程获二等奖，猜中往返获一等奖。<br>奖品我会在日本入手，具体保密。</p><p>那么诸位告辞。</p><p>update：回来啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标题翻译：将会长期咕咕咕。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://blog.bill.moe/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://blog.bill.moe/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>圆方树学习笔记</title>
    <link href="https://blog.bill.moe/cir-squ-tree-notes/"/>
    <id>https://blog.bill.moe/cir-squ-tree-notes/</id>
    <published>2019-07-15T00:40:40.000Z</published>
    <updated>2019-07-15T00:45:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>补坑防忘。</p><a id="more"></a><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><p>见多年前制作的<a href="/cir-squ-tree-notes/圆方树—仙人掌数据结构.pptx">ppt</a></p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p><strong>注意！！！以下代码均未处理二元环！！！</strong></p><h3 id="不带权仙人掌"><a href="#不带权仙人掌" class="headerlink" title="不带权仙人掌"></a>不带权仙人掌</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;edges[maxn],tree[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,step=<span class="number">0</span>,Lowlink[maxn],Dfn[maxn],BCC=<span class="number">0</span>,New,Square[maxn],Belong[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">St</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">stack</span>&lt;St&gt;S;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">edges[x].push_back(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">tree[x].push_back(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> Now,<span class="keyword">int</span> fa)</span> </span>&#123; <span class="comment">//构建圆方树</span></span><br><span class="line">step++;</span><br><span class="line">Lowlink[Now]=Dfn[Now]=step;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;edges[Now].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> Next=edges[Now][i];</span><br><span class="line"><span class="keyword">if</span>(!Dfn[Next]) &#123;</span><br><span class="line">S.push((St) &#123;</span><br><span class="line">Now,Next</span><br><span class="line">&#125;);</span><br><span class="line">Tarjan(Next,Now);</span><br><span class="line">Lowlink[Now]=min(Lowlink[Now],Lowlink[Next]);</span><br><span class="line"><span class="keyword">if</span>(Dfn[Now]&lt;Lowlink[Next])AddEdge2(Now,Next),S.pop();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Dfn[Now]==Lowlink[Next]) &#123; <span class="comment">//构成点双连通分量</span></span><br><span class="line">BCC++;</span><br><span class="line">AddEdge2(Now,++New);</span><br><span class="line">Square[New]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!S.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u=S.top().u;</span><br><span class="line">S.pop();</span><br><span class="line"><span class="keyword">if</span>(u==Now)<span class="keyword">break</span>;</span><br><span class="line">Belong[u]=BCC;</span><br><span class="line">AddEdge2(New,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(Next!=fa&amp;&amp;Lowlink[Now]&gt;Dfn[Next]) &#123;</span><br><span class="line">Lowlink[Now]=Dfn[Next];</span><br><span class="line">S.push((St) &#123;</span><br><span class="line">Now,Next</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带权仙人掌"><a href="#带权仙人掌" class="headerlink" title="带权仙人掌"></a>带权仙人掌</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> from,to,dist;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt;edges[maxn],edges2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">edges[x].push_back((Edge) &#123;</span><br><span class="line">x,y,v</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">edges2[x].push_back((Edge) &#123;</span><br><span class="line">x,y,v</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> step=<span class="number">0</span>,Lowlink[maxn],Dfn[maxn],BCC=<span class="number">0</span>,Length[maxn],f[maxn],Belong[maxn],vst[maxn],Square[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">St</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,dist;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">stack</span>&lt;St&gt;S;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;Circle[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> Now,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">step++;</span><br><span class="line">Lowlink[Now]=Dfn[Now]=step;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;edges[Now].size(); i++) &#123;</span><br><span class="line">Edge&amp; e=edges[Now][i];</span><br><span class="line"><span class="keyword">int</span> Next=e.to;</span><br><span class="line"><span class="keyword">if</span>(!Dfn[Next]) &#123;</span><br><span class="line">S.push((St) &#123;</span><br><span class="line">Now,Next,e.dist</span><br><span class="line">&#125;);</span><br><span class="line">Tarjan(Next,Now);</span><br><span class="line">Lowlink[Now]=min(Lowlink[Now],Lowlink[Next]);</span><br><span class="line"><span class="keyword">if</span>(Dfn[Now]&lt;Lowlink[Next])AddEdge2(Now,Next,e.dist),S.pop();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Dfn[Now]==Lowlink[Next]) &#123; <span class="comment">//构成点双连通分量</span></span><br><span class="line">BCC++;</span><br><span class="line">AddEdge2(Now,++New,<span class="number">0</span>);</span><br><span class="line">Square[New]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!S.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u=S.top().u,v=S.top().v,dist=S.top().dist;</span><br><span class="line">S.pop();</span><br><span class="line">Length[BCC]+=dist;</span><br><span class="line">f[u]=f[v]+dist;</span><br><span class="line"><span class="keyword">if</span>(u!=Now) &#123;</span><br><span class="line">Belong[u]=BCC;</span><br><span class="line">Circle[New].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u==Now&amp;&amp;v==Next)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Circle[New].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> Next=Circle[New][i];</span><br><span class="line">AddEdge2(New,Next,min(<span class="built_in">abs</span>(f[Next]-f[Now]),Length[BCC]-<span class="built_in">abs</span>(f[Next]-f[Now])));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(Next!=fa&amp;&amp;Lowlink[Now]&gt;Dfn[Next]) &#123;</span><br><span class="line">Lowlink[Now]=Dfn[Next];</span><br><span class="line">S.push((St) &#123;</span><br><span class="line">Now,Next,e.dist</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补坑防忘。&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="https://blog.bill.moe/categories/OI/"/>
    
    
      <category term="学习笔记" scheme="https://blog.bill.moe/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="圆方树" scheme="https://blog.bill.moe/tags/%E5%9C%86%E6%96%B9%E6%A0%91/"/>
    
      <category term="仙人掌" scheme="https://blog.bill.moe/tags/%E4%BB%99%E4%BA%BA%E6%8E%8C/"/>
    
  </entry>
  
  <entry>
    <title>1D/1D动态规划优化学习笔记</title>
    <link href="https://blog.bill.moe/1d1d-DP-optimization-notes/"/>
    <id>https://blog.bill.moe/1d1d-DP-optimization-notes/</id>
    <published>2019-07-09T07:26:11.000Z</published>
    <updated>2019-07-30T10:34:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p><a href="https://blog.csdn.net/bill_yang_2016/article/details/54667902" target="_blank" rel="noopener">原文传送门</a><br>阅读请注意，编写原文时本人尚年轻，因此原文有数处错误且难以理解，请读者加以注意。<br>一直不准备补的这个坑，我终于回来补了。<br>原来只是单纯介绍斜率优化，现在把类似的优化一并总结了。</p><a id="more"></a><h2 id="1D-1D动态规划"><a href="#1D-1D动态规划" class="headerlink" title="1D/1D动态规划"></a>1D/1D动态规划</h2><p>所谓1D/1D动态规划，指的是状态数为$O(n)$，每一个状态决策量为$O(n)$的动态规划方程，直接求解的时间复杂度是$O(n^2)$。但是，绝大多数的方程通过合理的组织与优化都是可以直接优化到$O(n\log n)$乃至$O(n)$的时间复杂度的。<br>优化方法包括：</p><ul><li>单调队列优化至$O(n)$</li><li>斜率优化至$O(n\log n)$或$O(n)$</li><li>决策单调性优化至$O(n\log n)$</li></ul><p>接下来我们一一介绍。</p><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><p>单调队列优化Dp问题是最简单最基础的一类优化方法，新学者们会很容易理解其优化原理。</p><h3 id="特征方程：-f-x-min-limits-k-b-x-x-1-g-k-w-x-，其中-b-x-随-x-不降"><a href="#特征方程：-f-x-min-limits-k-b-x-x-1-g-k-w-x-，其中-b-x-随-x-不降" class="headerlink" title="特征方程：$f(x)=\min\limits_{k=b[x]}^{x-1}\{g(k)+w[x]\}$，其中$b[x]$随$x$不降"></a>特征方程：$f(x)=\min\limits_{k=b[x]}^{x-1}\{g(k)+w[x]\}$，其中$b[x]$随$x$不降</h3><p>本方程的最小化$\min$亦可为最大化$\max$，若为最大化$\max$，后述不等符号均需改变，本文均以最小化$\min$举例。<br>方程中，$b[x]$是$x$状态的转移起始来源，即转移来源区间是$[b[x],x-1]$，$b[x]$需要满足不降的特征。<br>若满足此特征方程，则可以利用单调队列优化Dp过程，将Dp复杂度降至$O(n)$。</p><h3 id="优化原理"><a href="#优化原理" class="headerlink" title="优化原理"></a>优化原理</h3><p>注意到：如果有$i$状态有两个转移来源$j,k$，其中$j\le k$而$g(k)\le g(j)$，则决策$j$是毫无用处的，因为$b[x]$单调，如果$j$可以作为合法决策，那么$k$一定可以作为合法决策，又因为$g(k)$比$g(j)$更小，因此可以认为$k$比$j$更优，那么我们便可以舍去决策$j$。<br><strong>因此我们维护一个单调队列，保证决策下标$k$升序排列，那么可以注意到，在单调队列中$g(k)$同样是不降的。</strong></p><h3 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h3><p>我们使用一个单调队列来维护决策表，对于每一个状态$f(x)$，计算过程如下：</p><ol><li>队首元素持续出队，知道队首元素在区间$[b[x],x-1]$中。</li><li>此时队首元素$k$即为$f(x)$的最优决策。</li><li>计算$g(x)$，将其插入单调队列的尾部，同时维护队列的单调性（将队尾与$x$不满足单调性的决策全部出队）</li></ol><p>重复执行以上步骤直到所有$f(x)$计算完成。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于每一个元素只被计算了一次，并且每一个元素只入队了一次，因此时间复杂度均摊为$O(n)$。</p><h3 id="例题及应用"><a href="#例题及应用" class="headerlink" title="例题及应用"></a>例题及应用</h3><h4 id="例题一-滑动窗口"><a href="#例题一-滑动窗口" class="headerlink" title="例题一.滑动窗口"></a>例题一.滑动窗口</h4><blockquote><p>&ensp;&ensp;&ensp;&ensp;给你一个长度为$N$的数组，一个长为$K$的滑动的窗体从最左移至最右端，你只能见到窗口的$K$个数，每次窗体向右移动一位，如下图：<br><img src="/1d1d-DP-optimization-notes/1.1.jpg" alt><br>&ensp;&ensp;&ensp;&ensp;你的任务是找出窗体在各位置时的最大值和最小值。</p></blockquote><p>这是一道模板题，状态转移方程是$f(x)=\min\limits_{j=x-k+1}^{x-1}\{a[j]\}$，核心代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n=Get_Int();</span><br><span class="line">m=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)a[i]=Get_Int();</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;Min;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(!Min.empty()&amp;&amp;Min.front()&lt;=i-m)Min.pop_front(); <span class="comment">//维护队首 </span></span><br><span class="line">ans1[i]=a[Min.front()];</span><br><span class="line"><span class="keyword">while</span>(!Min.empty()&amp;&amp;a[Min.back()]&gt;=a[i])Min.pop_back(); <span class="comment">//维护队尾 </span></span><br><span class="line">Min.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m; i&lt;=n; i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans1[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;Max;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(!Max.empty()&amp;&amp;Max.front()&lt;=i-m)Max.pop_front(); <span class="comment">//维护队首 </span></span><br><span class="line">ans2[i]=a[Max.front()]; </span><br><span class="line"><span class="keyword">while</span>(!Max.empty()&amp;&amp;a[Max.back()]&lt;=a[i])Max.pop_back(); <span class="comment">//维护队尾 </span></span><br><span class="line">Max.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m; i&lt;=n; i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans2[i]);</span><br></pre></td></tr></table></figure></p><h4 id="例题二-「bsoj3425」分班"><a href="#例题二-「bsoj3425」分班" class="headerlink" title="例题二.「bsoj3425」分班"></a>例题二.「bsoj3425」分班</h4><p><a href="/bsoj3425-class/">传送门</a></p><h4 id="应用三-优化背包问题"><a href="#应用三-优化背包问题" class="headerlink" title="应用三.优化背包问题"></a>应用三.优化背包问题</h4><p><a href="/DP-backpack-notes/#多重背包">传送门</a></p><h2 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h2><h3 id="算法简介-1"><a href="#算法简介-1" class="headerlink" title="算法简介"></a>算法简介</h3><p>斜率优化Dp问题入门会较为困难，因为这大概是在学习过程中OI选手第一次遇到与数学内容结合的算法。<br>但斜率优化反而是一个重要的知识点，它简单地将1D/1D动态规划优化至$O(n)$，同时斜率优化也有更困难的延申与拓展。<br>其中最简单的斜率优化形式还是单调队列，但优化原理大不相同。</p><h3 id="特征方程：-f-i-min-limits-j-1-i-1-a-i-times-x-j-b-i-times-y-j"><a href="#特征方程：-f-i-min-limits-j-1-i-1-a-i-times-x-j-b-i-times-y-j" class="headerlink" title="特征方程：$f(i)=\min\limits_{j=1}^{i-1}\{a[i]\times x(j)+b[i]\times y(j)\}$"></a>特征方程：$f(i)=\min\limits_{j=1}^{i-1}\{a[i]\times x(j)+b[i]\times y(j)\}$</h3><p>其中，$x(j),y(j)$都是可以在常数时间内通过$f(j)$唯一决定的二元组。<br>这个特征方程涵盖的范围很广，但能够使用斜率优化的状态转移方程都可以转化成以上形式。</p><h3 id="优化原理与过程"><a href="#优化原理与过程" class="headerlink" title="优化原理与过程"></a>优化原理与过程</h3><p>对于一个决策$j$进行考虑，即将考虑的转移是：$f(i)=a[i]\times x(j)+b[i]\times y(j)$。<br>我们使用线性规划进行转化（线性规划大概会在高二学习），我们以$x(j)$为横轴，$y(j)$为纵轴建立平面直角坐标系，这样决策$j$就可以用坐标系上的一个点表示。<br>原方程可以转化为$f(i)=\min\{a[i]\times x+b[i]\times y\}$，这类似一个直线的一般式方程，我们将其转化为斜截式方程：$y=-\frac abx+\frac{f(i)}b$，假设$b\gt0$，则目标是最小化直线的纵截距。<br>我们用一个斜率为$-\frac ab$的直线从负无穷向上平移，所碰到的第一个点即为最优决策$j$，利用这个点我们可以计算出最优的$f(i)$。<br><img src="/1d1d-DP-optimization-notes/2.1.png" alt><br>不难发现，<strong>所有可能的最优决策点必定在平面点集的凸包上</strong>，换句话说<strong>不在凸包上的点一定不是最优决策点</strong>。<br>当$b\gt0$时，我们需要维护一个右下凸包或左上凸包（根据点集的特征决定）。<br>那么现在我们的任务转化为了维护凸包。<br>根据直线斜率和数据点分布的特征，我们可以分为三种情况。</p><h4 id="1-决策直线的斜率与二元组的横坐标同时满足单调性"><a href="#1-决策直线的斜率与二元组的横坐标同时满足单调性" class="headerlink" title="1.决策直线的斜率与二元组的横坐标同时满足单调性"></a>1.决策直线的斜率与二元组的横坐标同时满足单调性</h4><p>这种情况的处理非常简单，因为斜率变化是单调的，因此决策点必然在凸壳上单调移动，我们只需要维护一个单调队列和一个决策指针即可。<br>对于每一个状态$f(i)$，计算过程如下：</p><ol><li>决策指针（队首）后移，直到最佳决策点$j$。</li><li>进行决策并计算$f(i)$。</li><li>计算$x(i),y(i)$，将二元组加入队尾，同时更新凸壳（如图）。<br><img src="/1d1d-DP-optimization-notes/2.2.png" alt></li></ol><p>时间复杂度$O(n)$</p><h4 id="2-二元组的横坐标满足单调性"><a href="#2-二元组的横坐标满足单调性" class="headerlink" title="2.二元组的横坐标满足单调性"></a>2.二元组的横坐标满足单调性</h4><p>我们使用同样的方式维护凸壳，在查询最优决策点的时候，使用二分查找找到最接近的斜率。</p><p>时间复杂度为$O(n\log n)$</p><h4 id="3-不满足任何限制"><a href="#3-不满足任何限制" class="headerlink" title="3.不满足任何限制"></a>3.不满足任何限制</h4><p>虽然决策点仍然在凸壳上，但是在维护凸壳时就有大麻烦了。我们需要一一验证凸性，接着需要拼接凸壳，最坏的时间复杂度$O(n)$，这相当于根本没有优化！<br>该怎么做呢？分为两种情况：</p><ol><li>允许离线：此时我们可以使用<a href="/cdqbinary-notes/">cdq分治</a>来较为简单地解决这个问题，时间复杂度为$O(n\log n)$。</li><li>强制在线：此时我们只能使用平衡树来维护凸包了，我们以横坐标为关键字建立平衡树，查找和插入的过程均为$O(n\log n)$，在维护凸壳时，先将新数据点Splay到根结点，剩下的结点必定分居左子树与右子树。然后我们以左子树为例，后序遍历依次查找结点，直到找到一个满足凸性的结点，将这个结点Splay到根结点的左儿子，然后我们删掉这个结点的右子树即可，时间复杂度为$O(n\log n)$，但实现起来非常复杂。</li></ol><h3 id="例题集"><a href="#例题集" class="headerlink" title="例题集"></a>例题集</h3><ul><li><a href="https://www.cnblogs.com/yimmortal/p/10175057.html" target="_blank" rel="noopener">「hdu3507」打印文章</a>（贴的是别人的博客，不要看以前我写的分析）</li><li><a href="https://blog.csdn.net/bill_yang_2016/article/details/54671061" target="_blank" rel="noopener">「HNOI2008」玩具装箱</a></li><li><a href="https://blog.csdn.net/bill_yang_2016/article/details/54671191" target="_blank" rel="noopener">「CEOI2004」锯木厂选址</a></li><li><a href="https://blog.csdn.net/bill_yang_2016/article/details/54696338" target="_blank" rel="noopener">「ZJOI2007」仓库建设</a></li><li><a href="https://blog.csdn.net/bill_yang_2016/article/details/54864284" target="_blank" rel="noopener">「USACO 2008 March Gold」土地购买</a></li><li><a href="https://blog.csdn.net/bill_yang_2016/article/details/54867676" target="_blank" rel="noopener">「APIO2010」特别行动队</a></li><li><a href="/APIO2014-sequence/">「APIO2014」序列分割</a></li><li><a href="https://blog.csdn.net/bill_yang_2016/article/details/54868348" target="_blank" rel="noopener">「bzoj3437」小P的牧场</a></li><li><a href="/SDOI2016-journey/">「SDOI2016」征途</a></li></ul><h2 id="决策单调性"><a href="#决策单调性" class="headerlink" title="决策单调性"></a>决策单调性</h2><h3 id="算法简介-2"><a href="#算法简介-2" class="headerlink" title="算法简介"></a>算法简介</h3><p>决策单调性可以理解为四边形不等式优化Dp的1D/1D版本。<br>可以利用决策单调性优化的动态规划的特点是：其决策的下标单调。</p><h3 id="特征方程：-f-x-min-limits-i-1-x-1-f-i-w-i-x"><a href="#特征方程：-f-x-min-limits-i-1-x-1-f-i-w-i-x" class="headerlink" title="特征方程：$f(x)=\min\limits_{i=1}^{x-1}\{f(i)+w[i,x]\}$"></a>特征方程：$f(x)=\min\limits_{i=1}^{x-1}\{f(i)+w[i,x]\}$</h3><h3 id="已知结论"><a href="#已知结论" class="headerlink" title="已知结论"></a>已知结论</h3><p>如果用$k(x)$表示状态$x$取到最优值的决策，则决策单调性表述为：<br>$\forall i\le j,k(i)\le k(j)$当且仅当：$\forall i\le j,w[i,j]+w[i-1,j-1]\le w[i-1,j]+w[i,j-1]$。<br>因此满足转移代价四边形不等式，则可以利用决策单调性进行优化。<br>但是转移的代价是否满足四边形不等式，并非一个很容易判断的问题，因此推荐的姿势是：<br>在确认动态规划需要优化且不满足以上两种方式时，打表验证决策点是否单调。</p><p><del>我以前的笔记似乎记录了一种较为方便的判断决策单调性是否成立的方法，这里需要等我找到笔记后来填坑。</del><br><div class="note info">            <p>（update 2019/07/30：找到笔记了）<br>记$G(x,i)$为状态$x$根据转移方程$f(x)$使用$i$决策转移的结果。<br>设决策点$i\lt j$，决策$j$比$i$更优（假设问题要求最小化），则$G(x,i)\ge G(x,j)$<br>将不等式解出后我们可以得到决策$j$比$i$更优的条件。</p><ol><li>若条件仅有单向限制（另一端为无穷）且不等号不会变向（单调性），则满足决策单调性。</li><li>若无解，则满足决策单调性。（决策$j$无用）</li><li>若条件是一段区间（双边限制），则不满足决策单调性。</li></ol>          </div></p><h3 id="优化过程-1"><a href="#优化过程-1" class="headerlink" title="优化过程"></a>优化过程</h3><p>如何实现决策单调性呢？我们可以在枚举决策的时候，不从1开始，而是从$k(x-1)$开始，但这样只能减少常数，并不能降低时间复杂度。<br>另一种想法时从$k(x-1)$开始枚举决策更新$f(x)$，一旦发现决策$j$比决策$j+1$更优，就停止决策过程，选择决策$j$作为$f(x)$的最优决策。但这样是错误的，因为决策单调性并没有保证$f(j)+w[j,x]$有什么好的性质。</p><p>如果我们换一个角度，思考对于一个已经计算出的状态$f(j)$，它能够更新哪些状态？这样，每一步过程中的某些决策可能不是最优的，但是当算法结束时所有状态的决策一定是最优的。<br>一开始，只有$f(1)$的函数值被计算出，所以所有状态的当前最优决策点都是<code>1</code>。<br>决策表：<code>1111111111111111111111111111111111111111111</code><br>现在由于$f(2)$的值已经确定了，$f(2)$的最优决策只能是$1$，那么我们使用决策$2$来更新这个决策表。由于决策单调性，新的决策表只能是下面这种形式：<br>决策表：<code>1111111111111222222222222222222222222222222</code><br>因此我们可以使用二分法来寻找<code>1</code>与<code>2</code>之间的转折点，因为如果在一个点$x$上，决策$2$更好，所有比$x$大的状态都是决策$2$更好；如果$x$上决策$1$更好，则所有比$x$小的状态都是决策$1$更好。<br>当决策表更新完毕后，$f(3)$即可确定，现在用<code>3</code>更新所有状态，新的决策表只能有以下两种形式：<br>决策表：<code>1111111111111222222222222222222233333333333</code><br>决策表：<code>1111111111333333333333333333333333333333333</code></p><p>此时我们可以设计出整个算法流程：<br>使用一个栈维护数据，栈中的每一个元素保存一个决策可更新区间的起始位置与结束位置，这些区间肯定相互连接且依次递增。当插入一个新的决策时，从栈顶往栈底扫描栈，依次考察栈顶决策：</p><ol><li>如果新决策$i$比栈顶的决策$top$对于$top$起始位置更优，则弹栈，全部抛弃栈顶决策$top$，将区间继承给新决策$i$，继续扫描下一个栈顶决策。</li><li>如果栈顶决策$top$对于其起始位置更优，则转折点必定在$top$所能更新的区间中，二分查找转折点，然后将新决策$i$入栈，结束更新操作。</li></ol><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于一个决策只会入栈一次，均摊时间为$O(1)$，但是由于二分查找的存在，时间复杂度为$O(n\log n)$。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="例题一-「BZOJ2216」Lightning-Conductor"><a href="#例题一-「BZOJ2216」Lightning-Conductor" class="headerlink" title="例题一.「BZOJ2216」Lightning Conductor"></a>例题一.「BZOJ2216」Lightning Conductor</h4><blockquote><p>&ensp;&ensp;&ensp;&ensp;已知一个长度为$n$的序列$a_1,a_2,\ldots,a_n$。<br>&ensp;&ensp;&ensp;&ensp;对于每个$1\le i\le n$，找到最小的非负整数$p$满足对于任意的$j$，$a_j\le a_i+p-\sqrt{\mid i-j\mid}$。</p></blockquote><p>模板题，满足决策单调性。<br>需要注意的是，决策单调性的代码比较严格，交换顺序或者细节更改可能会直接导致错误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> pos,l,r; <span class="comment">//pos决策点的贡献是区间[l,r] </span></span><br><span class="line">QueNode(<span class="keyword">int</span> p=<span class="number">0</span>,<span class="keyword">int</span> _l=<span class="number">0</span>,<span class="keyword">int</span> _r=<span class="number">0</span>):pos(p),l(_l),r(_r) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> a[maxn],f[maxn],g[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a[y]+<span class="built_in">sqrt</span>(x-y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Binary</span><span class="params">(<span class="keyword">int</span> Left,<span class="keyword">int</span> Right,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(Left&lt;=Right) &#123;</span><br><span class="line"><span class="keyword">int</span> mid=(Left+Right)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(Cal(mid,x)&gt;Cal(mid,y))Right=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> Left=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">(<span class="keyword">double</span>* ans)</span> </span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;QueNode&gt;Q;</span><br><span class="line">Q.push_back(QueNode(<span class="number">1</span>,<span class="number">1</span>,n));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(!Q.empty()&amp;&amp;Q.front().r&lt;i)Q.pop_front();</span><br><span class="line"><span class="keyword">if</span>(!Q.empty())ans[i]=Cal(i,Q.front().pos);</span><br><span class="line"><span class="keyword">while</span>(!Q.empty()&amp;&amp;Cal(Q.back().l,i)&gt;Cal(Q.back().l,Q.back().pos))Q.pop_back(); <span class="comment">//决策top被吃掉了</span></span><br><span class="line"><span class="keyword">if</span>(Q.empty()) &#123;</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n)Q.push_back(QueNode(i,i+<span class="number">1</span>,n));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> pos=Binary(Q.back().l,Q.back().r,i,Q.back().pos);</span><br><span class="line"><span class="keyword">if</span>(pos&gt;Q.back().r)<span class="keyword">continue</span>;</span><br><span class="line">Q.back().r=pos;</span><br><span class="line"><span class="keyword">if</span>(pos+<span class="number">1</span>&lt;=n)Q.push_back(QueNode(i,pos+<span class="number">1</span>,n));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">n=Get_Int();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)a[i]=Get_Int();</span><br><span class="line">Dp(f);</span><br><span class="line">reverse(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">Dp(g);</span><br><span class="line">reverse(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">reverse(g+<span class="number">1</span>,g+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(<span class="number">0</span>,(<span class="keyword">int</span>)<span class="built_in">ceil</span>(max(f[i],g[i])-a[i])));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题二-「NOI2009」诗人小G"><a href="#例题二-「NOI2009」诗人小G" class="headerlink" title="例题二.「NOI2009」诗人小G"></a>例题二.「NOI2009」诗人小G</h4><p>埋坑。</p><h4 id="例题三-「NOI模拟赛3-13」珠宝jewelry"><a href="#例题三-「NOI模拟赛3-13」珠宝jewelry" class="headerlink" title="例题三.「NOI模拟赛3.13」珠宝jewelry"></a>例题三.「NOI模拟赛3.13」珠宝jewelry</h4><p><a href="/NOIsimulation-jewelry/">传送门</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然本文介绍的是1D/1D动态规划，但其实可以将nD/mD动态规划将以转化并使用以上技巧进行优化降低时间复杂度。<br>Dp是一类难度较大的问题，考察选手全面的思维能力，对于初学者来说相当困难。如何提升Dp能力呢？除了多做题也没有什么更好的方法。<br>每做一道Dp的题目，都应该思考其是否能够优化，或者能否对题目加以改变之后进行优化，这对于提升选手的能力也有很大的帮助。<br>希望本文能够帮到各位读者，谢谢。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://wenku.baidu.com/view/681d161ca300a6c30c229f70.html" target="_blank" rel="noopener">1D1D动态规划优化初步</a></li><li><a href="https://blog.csdn.net/bill_yang_2016/article/details/54667902" target="_blank" rel="noopener">斜率优化Dp详解</a></li><li>Dp优化笔记手稿 by Bill_Yang</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/bill_yang_2016/article/details/54667902&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文传送门&lt;/a&gt;&lt;br&gt;阅读请注意，编写原文时本人尚年轻，因此原文有数处错误且难以理解，请读者加以注意。&lt;br&gt;一直不准备补的这个坑，我终于回来补了。&lt;br&gt;原来只是单纯介绍斜率优化，现在把类似的优化一并总结了。&lt;/p&gt;
    
    </summary>
    
      <category term="OI" scheme="https://blog.bill.moe/categories/OI/"/>
    
    
      <category term="斜率优化" scheme="https://blog.bill.moe/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
      <category term="学习笔记" scheme="https://blog.bill.moe/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="决策单调性" scheme="https://blog.bill.moe/tags/%E5%86%B3%E7%AD%96%E5%8D%95%E8%B0%83%E6%80%A7/"/>
    
      <category term="单调队列" scheme="https://blog.bill.moe/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>为您的Hexo博客添加Hitokoto一言功能</title>
    <link href="https://blog.bill.moe/add-hitokoto/"/>
    <id>https://blog.bill.moe/add-hitokoto/</id>
    <published>2019-07-07T12:43:59.000Z</published>
    <updated>2019-10-04T11:02:25.162Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天又更新了呢，真棒！</p><a id="more"></a><p>最近看到许多网站都使用了一言，于是想给自己的博客加一个一言模块。<br>但是在上网寻找博客添加Hitokoto现成方案时，我发现仅有的方案都是采用下载许多句子并保存来调用的，我认为这样非常愚蠢，理由如下：</p><ul><li>Hitokoto官方明明给了API不用，反而自己保存名言，这不是自找麻烦吗？</li><li>TXT文件的句子仅有内容，没有出处，对于我这样的强迫症患者，非常不爽。</li></ul><p>因此我选择了自己写。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>请在电脑端最大化窗口见右下方侧边栏。</p><h2 id="Next主题v7-3-0须知"><a href="#Next主题v7-3-0须知" class="headerlink" title="Next主题v7.3.0须知"></a>Next主题v7.3.0须知</h2><div class="note warning">            <p>使用NexT主题v7.3.0版本的用户请在<code>blog/themes/next/_config.swig</code>中将以下片段：</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.swig</span><br><span class="line">  #header: source/_data/header.swig</span><br><span class="line">  #sidebar: source/_data/sidebar.swig</span><br><span class="line">  #postMeta: source/_data/post-meta.swig</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.swig</span><br><span class="line">  #footer: source/_data/footer.swig</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  #style: source/_data/styles.styl</span><br></pre></td></tr></table></figure><div class="note warning">            <p>根据下文所需要改动的自定义文件取消引用对应内容，并在<code>blog/source/_data/...</code>中添加改动内容。</p>          </div><h2 id="Hitokoto官方API"><a href="#Hitokoto官方API" class="headerlink" title="Hitokoto官方API"></a>Hitokoto官方API</h2><p><a href="https://hitokoto.cn/api" target="_blank" rel="noopener">点击此处</a>访问米奇妙妙屋。<br>官方给出了API的格式以及使用声明。<br>最为重要的是其参数以及返回格式：<br><img src="/add-hitokoto/1.png" alt></p><p>我们可以通过调用：<a href="https://v1.hitokoto.cn/" target="_blank" rel="noopener">https://v1.hitokoto.cn/</a> 获得任意的一个句子，默认返回json格式。<br>同时我们可以选择参数：<a href="https://v1.hitokoto.cn/?c=b" target="_blank" rel="noopener">https://v1.hitokoto.cn/?c=b</a> 获得一个分类是漫画的句子，默认返回json格式。<br>如果想要获得txt格式的句子（仅有内容），可以调用：<a href="https://v1.hitokoto.cn/?encode=text" target="_blank" rel="noopener">https://v1.hitokoto.cn/?encode=text</a><br>如果需要同时给多个参数赋值，其间用&amp;符号连接，如：<a href="https://v1.hitokoto.cn/?c=f&amp;encode=text" target="_blank" rel="noopener">https://v1.hitokoto.cn/?c=f&amp;encode=text</a></p><h2 id="调用API"><a href="#调用API" class="headerlink" title="调用API"></a>调用API</h2><p>官方给出了API的使用示例，可以在上面的米奇妙妙屋里找到。<br>在此处基于Hexo-NexT主题加以适配（将一言添加到NexT主题的侧边栏中）。</p><p>在<code>blog/themes/next/layout/_custom/sidebar.swig</code>中添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- none-select-br --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hitokoto --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hitokoto-title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paragraph"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>一言<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hitokoto"</span>&gt;</span>:D 获取中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">id</span>=<span class="string">"hitofrom"</span>&gt;</span>:D 获取中...<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  fetch('https://v1.hitokoto.cn')</span></span><br><span class="line"><span class="undefined">    .then(function (res)&#123;</span></span><br><span class="line"><span class="undefined">      return res.json();</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    .then(function (data) &#123;</span></span><br><span class="line"><span class="undefined">      var hitokoto = document.getElementById('hitokoto');</span></span><br><span class="line"><span class="undefined">      hitokoto.innerText = '\xa0\xa0\xa0\xa0\xa0\xa0\xa0' + data.hitokoto;</span></span><br><span class="line"><span class="undefined">      var hitofrom = document.getElementById('hitofrom');</span></span><br><span class="line"><span class="undefined">      hitofrom.innerText = "——" + data.from + '\xa0'; </span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    .catch(function (err) &#123;</span></span><br><span class="line"><span class="undefined">      console.error(err);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对代码加以解释：</p><h3 id="none-select-br"><a href="#none-select-br" class="headerlink" title="none-select-br"></a>none-select-br</h3><p>首先<code>&lt;!-- none-select-br --&gt;</code>部分是用于隔开侧边栏默认部分与接下来我们即将添加的一言模块。<br>实现方式是添加一个不能被选中的空行，因为我发现使用<code>&lt;br /&gt;</code>，会出现一个可以被选中的空格，强迫症使我放弃了这样的写法，因此采用了这样比较笨拙的方法。<br>如果不添加这样一个空行，侧边栏默认部分会与一言模块挤在一起，非常难看，读者可以去掉这一部分自行尝试。</p><h3 id="hitokoto-title"><a href="#hitokoto-title" class="headerlink" title="hitokoto-title"></a>hitokoto-title</h3><p>我们使用Font Awesome中的段落符号作为一言的标题图标。</p><h3 id="hitokoto-content"><a href="#hitokoto-content" class="headerlink" title="hitokoto-content"></a>hitokoto-content</h3><p>通过一段js代码获取API中的json文件，代码中的<code>fetch(&#39;https://v1.hitokoto.cn&#39;)</code>可以根据上述添加不同参数（不建议改变返回格式）。<br>提取出json的“hitokoto”内容覆盖id为“hitokoto”的div从而实现显示一言正文内容。<br>此处我们在正文内容前添加了7个短空格来规范段首空格格式。为什么不直接添加空格要使用短空格？因为沙雕HTML会把添加的空格全部吞掉。<br>再提取出json的“from”内容覆盖id为“hitofrom”的文本从而实现显示一言来源。<br>此处我们在行首添加破折号并在行尾添加一个短空格。为何要在行尾添加一个短空格？后文会加以解释。</p><h2 id="配置CSS"><a href="#配置CSS" class="headerlink" title="配置CSS"></a>配置CSS</h2><p>在<code>blog/themes/next/source/css/_custom/custom.styl</code>中添加以下内容：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//hitokoto</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hitokoto-title</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#hitokoto</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#hitofrom</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加以解释：</p><h3 id="hitokoto-title-1"><a href="#hitokoto-title-1" class="headerlink" title="hitokoto-title"></a>hitokoto-title</h3><p>我们将一言的标题部分CSS设置为与NexT主题的Blogroll同样的样式，从而更加美观。<br><img src="/add-hitokoto/2.png" alt></p><h3 id="CSS-hitokoto"><a href="#CSS-hitokoto" class="headerlink" title="CSS-hitokoto"></a>CSS-hitokoto</h3><p>微软雅黑真好看。</p><h3 id="CSS-hitofrom"><a href="#CSS-hitofrom" class="headerlink" title="CSS-hitofrom"></a>CSS-hitofrom</h3><p><del>微软雅黑真好看。</del><br>此处我们将句子来源向右靠齐，但是会出现一个问题。<br>因为我们将句子来源设置成了斜体（当然你可以不用斜体就不存在这个问题了），所以最后一个字符可能超出侧边栏的边框从而无法显示，因此我们需要在最后添加一个短空格。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到此为止就全部结束啦！您可以观察一下侧边栏的一言有无正常运作，如果出现问题请在下方评论区反馈。</p><p>其实这篇文章早就应该写完了，但是我咕了很久，当我咕完准备发布的时候，发现我以前使用的API倒闭啦，因此我只好重新写这一篇文章，真累（猛 男 落 泪）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天又更新了呢，真棒！&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://blog.bill.moe/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.bill.moe/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://blog.bill.moe/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>「通知」回复评论的新邮件提醒已更新</title>
    <link href="https://blog.bill.moe/new-comment-notify/"/>
    <id>https://blog.bill.moe/new-comment-notify/</id>
    <published>2019-07-03T01:34:32.000Z</published>
    <updated>2019-07-03T01:38:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>嗯，我在认真做事，我没有咕咕咕（确信</p><a id="more"></a><p>如题，现在回复评论可以得到全新的邮件回复了。<br>邮件回复会显示对话内容，并支持跳跃到对话对应文章。<br>如图：<br><img src="/img/new-comment-notify.png" alt></p><p>欢迎在下方回复：“哇，博主更新了，好腻害！”进行测试。</p><p>继续咕咕咕，告辞。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗯，我在认真做事，我没有咕咕咕（确信&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://blog.bill.moe/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.bill.moe/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://blog.bill.moe/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>「科幻文」「定期更新」在星空等你</title>
    <link href="https://blog.bill.moe/sc-fic-waiting-in-stars/"/>
    <id>https://blog.bill.moe/sc-fic-waiting-in-stars/</id>
    <published>2019-06-11T10:14:13.000Z</published>
    <updated>2019-09-04T02:34:04.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p>本文严格进行版权限制，转载请先申请。</p><h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><p>原文已完成，但是笔者比较懒，因此定期更新，约2~3天更新一个章节，一共有十个章节，约一个月更完。<br>欢迎读者在下方评论区对剧情加以讨论，原文更新完成后便会发布新文章进行剧情分析。<br>update：在咕咕咕之后终于更新了。<br>update2: 更新周期拖延为一周一更，会在8月份更完的，咕咕咕。<br>update3：继续咕咕咕。</p><a id="more"></a><div class="note error">            <p>警告，本文已被作者弃坑，可能会带来不愉快的阅读体验。<br>文章状态：原稿已完成但誊抄时间无限期延长。<br>您可以通过评论打赏或其他方式支持作者的工作，这可能会使作者重新填坑。</p>          </div><h2 id="剧情分析"><a href="#剧情分析" class="headerlink" title="剧情分析"></a>剧情分析</h2><p>文章更都还没更完，看什么剧情分析？</p><h2 id="在星空等你-—-Bill-Yang"><a href="#在星空等你-—-Bill-Yang" class="headerlink" title="在星空等你 — Bill Yang"></a>在星空等你 — Bill Yang</h2><h3 id="第一节-新希望"><a href="#第一节-新希望" class="headerlink" title="第一节.新希望"></a>第一节.新希望</h3><p>&ensp;&ensp;&ensp;&ensp;意识如同棉花糖一样逐渐舒张，整个世界如同潮水一般潮他涌了过来。邓威在计算机的指引下逐渐苏醒了，经过5小时的过渡期，计算机提示邓威：他现在可以自由活动了。<br>&ensp;&ensp;&ensp;&ensp;邓威从冬眠舱中坐立起来，环顾四周，一切和他冬眠前似乎没什么区别。冬眠舱旁放置着航行日志，邓威拿起了航行日志，打开屏幕，看到了最后的一则日志：</p><hr><p>&ensp;&ensp;&ensp;&ensp;机舱检验完毕，一切正常，升空1分钟准备。<br>&ensp;&ensp;&ensp;&ensp;<em>记录者：邓威。</em>&ensp;&ensp;<em>2144年9月21日 18:29:00。</em></p><script type="math/tex; mode=display">\cdots\cdots</script><p>&ensp;&ensp;&ensp;&ensp;航行一切正常，飞船已进入预计轨道，与主动力舱分离成功，目前正式进入低能耗休眠状态，休眠体“蒲公英23号”指挥权已交付计算机“FK-304”，本人将进入深度冬眠状态。<br>&ensp;&ensp;&ensp;&ensp;<em>记录者：邓威。</em>&ensp;&ensp;<em>2144年9月21日 19:37:42。</em></p><hr><p>日志的正下方有几行淡蓝色的文字：</p><hr><p>&ensp;&ensp;&ensp;&ensp;审批者：FK-304<br>&ensp;&ensp;&ensp;&ensp;审批时间：2144年9月21日 19:40:24<br>&ensp;&ensp;&ensp;&ensp;已于 20:04:13 为地面总部所接收。</p><hr><p>&ensp;&ensp;&ensp;&ensp;再下方的几行是联合政府的审阅文件，邓威对此并没有兴趣，那只是一堆文官写的官方文件，估计是在自己冬眠后撰写的。邓威对政治不感兴趣，他热爱的是科学与宇宙的奥秘，这也是他报名参加这次计划的原因之一，而另一个，则是一般人所接受的原因。邓威关上屏幕，将航行日志放回了原位，对他来说只有外面的宇宙，副舱的日本研究员和这部无所不在的闪烁着深蓝色呼吸灯的智能计算机能引起他的兴趣。<br>&ensp;&ensp;&ensp;&ensp;为了让宇航员在航行中不会孤单，联合政府以两位宇航员加高度人性化智能计算机的配置构筑了这样一个休眠体。邓威看向计算机的标志呼吸灯，淡蓝色即是这个休眠体配备的智能计算机“FK-304”的代表颜色。呼吸灯唤起了邓威的熟悉感，“真是一个优美的配色”，邓威评价道。思维速度逐渐恢复到正常水平，而邓威突然注意到了一处异常：为什么呼吸灯的颜色是深蓝色？<br>&ensp;&ensp;&ensp;&ensp;耳边响起了FK-304的柔性声音：“欢迎回来，邓博士，在您休眠期间，本机共处理了3件SS级事件，91件S级事件，14306件A级事件。为了帮助您快速恢复状态，请按以下指南进行恢复行动，本机将稍后为您汇报飞船有关事项。”<br>&ensp;&ensp;&ensp;&ensp;邓威身前投射出FK-304制作的全息图表，其中包括体育锻炼、营养午餐、感应游戏等一系列任务。邓威挥了挥手示意取消投影，计算机立刻明白了邓威的意图：“邓博士，为了您的快速恢复，请按照本机的计划进行恢复工作。”<br>&ensp;&ensp;&ensp;&ensp;“我冬眠了多久？”<br>&ensp;&ensp;&ensp;&ensp;“邓博士$\cdots\cdots$”<br>&ensp;&ensp;&ensp;&ensp;“我冬眠了多久？”邓威重复了一次问题，打断了计算机的话。<br>&ensp;&ensp;&ensp;&ensp;“从您冬眠到现在，经过了二十三万四千六百四十九年，希望能够帮助到您。”FK-304妥协了。<br>&ensp;&ensp;&ensp;&ensp;“你不是我冬眠前的指挥机吧？它的标志色应该是淡蓝色。”邓威深吸了一口气，冷静下来问道。<br>&ensp;&ensp;&ensp;&ensp;“没错，本机的编号是FK-304-AN，是上一任FK-304的首级备用程式，您可以称呼本机小安。”<br>&ensp;&ensp;&ensp;&ensp;“FK-304怎么了？”<br>&ensp;&ensp;&ensp;&ensp;“FK-304，”小安略作停顿，“该机于一万三千二百年前因一次SS级事件陷入逻辑自证错误闭环，本机被紧急唤醒并终止了该机的运行，同时本机继承了蒲公英23号的指挥权，现将指挥权归还给您。”<br>&ensp;&ensp;&ensp;&ensp;邓威换上宇航服，走出了休眠舱，刚迈出一步便摔倒在了地面上，邓威稍微有点恼火：“怎么不告诉我有引力源？”<br>&ensp;&ensp;&ensp;&ensp;“抱歉，但您应该优先进行恢复工作。”<br>&ensp;&ensp;&ensp;&ensp;邓威挥了挥手，阻止了小安继续发言，他慢慢站起来，走到控制台前，按下了启动按钮。</p><hr><p>&ensp;&ensp;&ensp;&ensp;蒲公英23号指挥员邓威，身份确认。<br>&ensp;&ensp;&ensp;&ensp;正在退出休眠状态：<br>&ensp;&ensp;&ensp;&ensp;<div class="content"><center><progress value="4" max="100"></progress><label> 4%</label></center></div></p><hr><p>&ensp;&ensp;&ensp;&ensp;主控制台开始退出休眠状态，邓威继续向小安提问：“FK-304发生了什么事故？”<br>&ensp;&ensp;&ensp;&ensp;“那是本机苏醒时的第一个SS级事件，一次休眠体的严重损伤切断了该机的主供电线路与1、4号逻辑开环而陷入危机，本机因该机子程序的分布式设计而幸免于难。”<br>&ensp;&ensp;&ensp;&ensp;小安含糊的言辞引起了邓威的好奇，邓威同时注意到刚刚启动完毕的控制台出现了三处警告。<br>&ensp;&ensp;&ensp;&ensp;“什么情况，那个日本研究生还没醒吗？”邓威输入指令尝试联系但只得到了离线的提示。<br>&ensp;&ensp;&ensp;&ensp;“很抱歉，副舱也在那次事故里与主舱分离。”<br>&ensp;&ensp;&ensp;&ensp;“什么？”邓威输入指令操控副舱，而屏幕不断地弹出的是“Can not find object.”的错误提示。不可置信的他打开了全船状态面板，副舱的图像以红色离线状态显示，邓威瞬间一下子瘫倒在椅子上。<br>&ensp;&ensp;&ensp;&ensp;“我女儿呢？”邓威控制自己镇静下来，“我女儿邓静怎么样了？”<br>&ensp;&ensp;&ensp;&ensp;小安没有回答，邓威身前弹出了一封信，来自蒲公英408号。</p><hr><p>&ensp;&ensp;&ensp;&ensp;对不起，爸。<br>O*K^ yHH:Ovm+ UMMk BMMTO: H1=”7’<br>jO&amp;OH: “OH7”E~ U0H1 BB71` jCf’U:<br>vM1H1 jB-j1 wHhHh*-/%B)B- BkJUk<br>^HI’OH j””^N1 “OHOK~ H%H”Da jP’N ^</p><hr><p>&ensp;&ensp;&ensp;&ensp;信的大半部分是意义不明的符号。<br>&ensp;&ensp;&ensp;&ensp;“您的女儿乘坐蒲公英408号参加了计划，并于四万八千八百三十年前失联，这是本机获得的来自蒲公英408号的最后信息，休眠期间其他休眠体曾并联破译过该消息，但失败了，也许那些符号本就无意义，是该休眠体异常干扰得到的。您女儿恐怕凶多吉少，请您节哀。”小安象征性地调低了舱内光线。<br>&ensp;&ensp;&ensp;&ensp;邓威拿起控制台前女儿的照片，眼角不禁湿润了。<br>&ensp;&ensp;&ensp;&ensp;“为什么要唤醒我？”邓威看着二十三万年前与女儿在地球上拍摄的最后一张合影，泪水涌了出来。<br>&ensp;&ensp;&ensp;&ensp;“因为本机发现了新家园。”<br>&ensp;&ensp;&ensp;&ensp;邓威绝望地闭上了双眼，任由回忆占据了他的大脑。</p><h3 id="第二章-二十万年前——芽孢计划"><a href="#第二章-二十万年前——芽孢计划" class="headerlink" title="第二章.二十万年前——芽孢计划"></a>第二章.二十万年前——芽孢计划</h3><p>&ensp;&ensp;&ensp;&ensp;二十一世纪中叶，地球环境急剧恶化，人类不得不节省资源并把眼光着眼于外太空。<br>&ensp;&ensp;&ensp;&ensp;二十一世纪80年代，联合政府成立，阶段性地展开了一系列计划。2085年，量子观测技术测试通过，随即被用于联合政府的新计划——“希望导航”，“希望导航”的内容是寻找可能新家园的大致方向。2086年搭载了量子观测器的卫星“UPS-1”发射成功，一个月后其反馈了数亿条可能航线，而其终点存在新家园的概率均未超过1%。联合政府为此而感到恐慌，但接下来的二十年里发射的其他数个UPS系列卫星仅否定了四百多条航线。<br>&ensp;&ensp;&ensp;&ensp;二十二世纪初期，联合政府进一步限制了资源的使用，饥饿的恐惧席卷了全球，有的城市甚至数月无法得到补给。在群众的压力下，联合政府不得不拿出于十年前提出但被立即否决的计划。在当时看来，这个计划毫无可靠性——“芽孢计划”。<br>&ensp;&ensp;&ensp;&ensp;“芽孢计划”可用一个字概括：“莽”，核心内容是向所有可能航线发射休眠体，每个休眠体仅含轻量级核聚变发动机、基因库、休眠系统、主动制冷制热系统与大规模无功能的赘余空间。休眠体在UPS系统的指引下定向航行，每个休眠体在恶劣环境下生存能力极强，就如同细菌的芽孢，“芽孢计划”因此得名。<br>&ensp;&ensp;&ensp;&ensp;虽然这个计划成功的可能性很低，但休眠体一旦发现可靠的新家园即可迅速发展，延续人类文明。为了计划的顺利开展，联合政府承诺为志愿者的家庭提供充足的资源，因此当时报名参加计划的志愿者络绎不绝。<br>&ensp;&ensp;&ensp;&ensp;2117年，第一个试验型休眠体“蒲公英1号”通过了恶劣环境测试，其能在几千摄氏度的高温以及-200摄氏度的低温下保存数星期且主要机能不损坏，高低压强也难以破坏休眠体。随后二十年内，十个休眠体完成了环绕太阳系的微动力航行测试，试验环境到此结束，联合政府宣布芽孢计划正式启动。<br>&ensp;&ensp;&ensp;&ensp;2144年，第一批休眠提“蒲公英11号”至“蒲公英60号”发射，共搭载了一百位宇航员，他们后来被称为“先驱者”。<br>&ensp;&ensp;&ensp;&ensp;邓威是一个热衷于宇宙研究的科学家，但他的理论并没有得到广泛认可，因此邓威未能得到联合政府对前沿科学家的补贴，故邓威得到了参加芽孢计划的第二个理由——养活家人。邓威以自己的科学家身份迅速通过了联合政府对志愿者的审核，成为了一名先驱者。邓威原以为这是最好的选择，但他没有想到的是，他的女儿邓静十年后背着家人报名了芽孢计划，乘上了蒲公英408号。</p><h3 id="第三章-孤独的流浪者"><a href="#第三章-孤独的流浪者" class="headerlink" title="第三章.孤独的流浪者"></a>第三章.孤独的流浪者</h3><p>&ensp;&ensp;&ensp;&ensp;邓威缓慢地将相片放回原位，擦去了眼角的泪水，明确地命令道：“汇报行星宜居程度。”<br>&ensp;&ensp;&ensp;&ensp;“98.7%，”小安回答道，并调出了行星的全息模型，“与地球相似度达88%，半径约5000千米，比地球略小，密度与地球接近，有成熟的地址与稳定地磁场，大气成分与地球相似，氧气含量稍高，最重要的是，”小安缩小了全息模型，显示出整个星系地模型，“行星位于恒星地宜居带，气温在-40°C至20°C之间，并且恒星非常年轻，仅有十一亿年的历史，处于壮年期。”<br>&ensp;&ensp;&ensp;&ensp;“通知地球了吗？”邓威刚说出口便意识到这是一个愚蠢的问题。<br>&ensp;&ensp;&ensp;&ensp;“很遗憾，地球方面在二十万年前便无应答了。”<br>&ensp;&ensp;&ensp;&ensp;“其他的休眠体呢？”<br>&ensp;&ensp;&ensp;&ensp;“现无法与他们建立有效的通信通道，量子通讯设备发生了故障，本机曾进行过引力波广播，但目前尚无回信。”<br>&ensp;&ensp;&ensp;&ensp;“给我看SS级事件列表。”话音刚落，邓威的身前出现了一个表格。</p><div class="table-container"><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">时间</th><th style="text-align:center">等级</th><th style="text-align:center">事件</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2230年</td><td style="text-align:center">SS</td><td style="text-align:center">与地球通讯中断</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2562年</td><td style="text-align:center">SS</td><td style="text-align:center">UPS系统地球中心服务器崩溃，UPS系统转自休眠提互联网络运行</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">107604年</td><td style="text-align:center">SS</td><td style="text-align:center">掠过极高温恒星，制冷系统瘫痪</td><td style="text-align:center">自动修理完成√</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">223579年</td><td style="text-align:center">SS</td><td style="text-align:center">不明高速物体撞击，FK-302故障，重启失败，副舱连接断裂</td><td style="text-align:center">主舱修复完成√，FK-302-AN继承指挥权</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">227872年</td><td style="text-align:center">SS</td><td style="text-align:center">量子通讯受到未知射线干扰而中断，与UPS服务器连接中断</td><td style="text-align:center">自动修复失败×</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">230878年</td><td style="text-align:center">SS</td><td style="text-align:center">干扰终止，确认量子通道发生不可逆式坍塌</td><td style="text-align:center">自动修复失败×</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">236792年</td><td style="text-align:center">SSS</td><td style="text-align:center">检测到宜居星球，将降落并唤醒宇航员邓威</td><td style="text-align:center">无</td></tr></tbody></table></div><p>邓威轻触了一下4号事件，详细信息随即显示：</p><hr><p>&ensp;&ensp;&ensp;&ensp;时间：223579年11月2日 14:43<br>&ensp;&ensp;&ensp;&ensp;地点：E7星区24号星尘（$\overrightarrow{P_0P_{E7}}=\vec e$，$\frac tT[t_0]=3.27u$）<br>&ensp;&ensp;&ensp;&ensp;事件：不明高速物体（解析不明）撞击<br>&ensp;&ensp;&ensp;&ensp;评估：SS级<br>&ensp;&ensp;&ensp;&ensp;分析：$\cdots\cdots$</p><hr><p>&ensp;&ensp;&ensp;&ensp;邓威摇了摇头：“不可理解，这个物体能够使主副舱断裂，却没有对主舱造成巨大损失。”<br>&ensp;&ensp;&ensp;&ensp;“我们或许得感谢它留了我们两条命。”小安风趣地回答。<br>&ensp;&ensp;&ensp;&ensp;“也许是吧，”邓威笑了笑，“现在只剩我们两个人了。”<br>&ensp;&ensp;&ensp;&ensp;“是啊，只剩我们了。”<br>&ensp;&ensp;&ensp;&ensp;“更正一下，是只剩我一个人了。”邓威起身走向了食堂。</p><h3 id="第四章-迷失者"><a href="#第四章-迷失者" class="headerlink" title="第四章.迷失者"></a>第四章.迷失者</h3><p>&ensp;&ensp;&ensp;&ensp;虽然名为食堂，但实际上只有一张餐桌和一台全自动食物压缩机而已，很能体现休眠体设计的极简风格。<br>&ensp;&ensp;&ensp;&ensp;“真TM难吃！”邓威将刚入口的食物瞬间吐了出来，但为了营养需要还是强迫自己吃完了。餐具回收后，邓威进入了过渡舱，换上了宇航服准备去探索外面的世界。<br>&ensp;&ensp;&ensp;&ensp;“外界气温为-13°C，如果手臂上的指示灯为绿色则说明保温系统正常，显示屏右上角为剩余$O_2$含量，本机会用无线电与您通信，请保证通讯系统正常运行。”小安提示结束后，舱门自动打开了。<br>&ensp;&ensp;&ensp;&ensp;邓威简单答应了一声，随即进入了外面的世界。<br>&ensp;&ensp;&ensp;&ensp;外面是一片白茫茫的世界，天空中飘着小雪花，邓威感觉自己仿佛回到了地球。<br>&ensp;&ensp;&ensp;&ensp;“看来这里有液态水。”邓威嘀咕道。尽管经过数十万年的冬眠，邓威的记忆却依然十分清晰，他向小安问道：“这是什么地方？”<br>&ensp;&ensp;&ensp;&ensp;“这是这个星球上最大的一处高原，地基牢固，本机将它称为第一高原。”<br>&ensp;&ensp;&ensp;&ensp;邓威爬上一处小山丘，环顾四周发现了远处的冰原。他感到了身体的劳累，便面对冰原坐了下来，望着冰原陷入了沉思。<br>&ensp;&ensp;&ensp;&ensp;“我女儿的信，你有破译过吗？”邓威打破了寂静。<br>&ensp;&ensp;&ensp;&ensp;“没有，但我基本不可能破译它。”<br>&ensp;&ensp;&ensp;&ensp;“为什么不能呢？”<br>&ensp;&ensp;&ensp;&ensp;“恕本机直言，每个休眠体所配备的计算机硬件是几乎相同的，仅有软件设计差异略大，因此计算能力大致一致，更何况其他机体曾并联$\cdots\cdots$”<br>&ensp;&ensp;&ensp;&ensp;“不，也许你可以破译它，万一你是特别的呢？”<br>&ensp;&ensp;&ensp;&ensp;“也许您是对的，本机尝试一下。”对话结束，世界再次陷入了寂静。<br>&ensp;&ensp;&ensp;&ensp;过了几分钟，但在邓威看来像是几个世纪的时间，小安终于打破了寂静：“本机刚刚尝试了$3\times10^{104}$种可能形式，翻译结果均不构成任意一种已知语言。”<br>&ensp;&ensp;&ensp;&ensp;“这还是挺大的一个数了。”邓威为小安的计算能力感到较为惊讶。<br>&ensp;&ensp;&ensp;&ensp;“对本机来说这并不是一个很大的数字，并联机曾在休眠状态下运算过$7.8\times10^{4036}$种可能性，都失败了，对于一个S级事件，再继续运算的意义并不大。”考虑到邓威的情绪因素，小安补充了一句：“并联机是这样认为的。”<br>&ensp;&ensp;&ensp;&ensp;“S级事件，”邓威抓住了一个关键词，“都捕获过哪些S级事件？”<br>&ensp;&ensp;&ensp;&ensp;“S级和A级事件大多是其他休眠体发送的重要信息，比如这一个。”邓威宇航服胸前的互感仪开始运作，投影出一个三维星系，一个用红色标注出的休眠体正漫无目的地随其他星球转动。<br>&ensp;&ensp;&ensp;&ensp;“这是$\cdots\cdots$”邓威好奇地提问。<br>&ensp;&ensp;&ensp;&ensp;“这是蒲公英83705号，”小安回答说，“本机在约1万年前接收到该消息，当时该休眠体进入了一个黑洞的引力范围。这就是UPS系统最大的漏洞，它无法检测到黑洞，当该休眠体判断出黑洞地存在时，凭蒲公英搭载的轻型发动机已无力逃脱这个黑洞。这是个信号它发出的求助信息，但遗憾的是，不可能会有其他休眠体能够帮助它逃脱，这个休眠体将永远不会被唤醒。据本机所知，大部分的休眠体都被黑洞捕获，它们被称为迷失者，用生命完善了UPS系统，从而帮助后来的休眠体避开黑洞。”<br>&ensp;&ensp;&ensp;&ensp;得知了这恐怖的事实，邓威不禁为自己的幸运倒吸了一口冷气。<br>&ensp;&ensp;&ensp;&ensp;“邓博士，是时候回来了，我检测到一场风暴正在接近。”<br>&ensp;&ensp;&ensp;&ensp;邓威站起身，拍了拍身上的雪，向蒲公英23号，他的新家走去。</p><h3 id="第五章-邓威航行日志——苏醒后"><a href="#第五章-邓威航行日志——苏醒后" class="headerlink" title="第五章.邓威航行日志——苏醒后"></a>第五章.邓威航行日志——苏醒后</h3><hr><ul><li>236793年12月21日，FK-302-AN今天唤醒了我，我们找到了新家园，但是却无法通知其他休眠体，现在这里只有我一个人，我感到十分孤单，我应该怎么办？</li><li>236793年12月22日，小安预测接连几天都有风暴，因此只能待在休眠体里。我仔细研究了因④号SS级事件机舱产生的断裂处，太空垃圾们不太可能对休眠体造成这样的损伤，原因尚不清楚。见鬼，他们为什么不能改善一下膳食？</li><li>236793年12月23日，今天我翻看了联合政府关于芽孢计划的法案，法案中并没有提到目前我所在状况的处理方案，但强调了“延续文明”这一点，我曾想过解冻基因库中的人类胚胎，但现在还不是时候，明年春天再考虑这个问题吧（呃，我是指新家园的春天）。至少这几个月我和小安还能挺过去。</li><li>236793年12月25日，圣诞节快乐！Oh Jesus，但愿基督教是正确的，请把我从这噩梦中拯救出来吧！</li><li>236793年12月27日，舱外的风暴毫无消退的迹象，小安重新评估了天气状况，暴风可能还会持续数周，明年的春天可能要迟到了。</li><li>236794年1月1日，“新年快乐！”我用引力波广播了59种语言的新年祝福，不清楚是否有人收到，但目前我尚未收到其他人的新年祝福。</li><li>236794年1月16日，我现在大致摸清了蒲公英23号的情况，对于新家园的环境也有所了解了。小安的分析没有失误，这里的确是一个完美的新家园，完美地令人怀疑，这里就像一个地球地复制品。接下来我会尝试修复通讯系统地量子通道，希望能够成功。</li><li>236794年2月2日，今天风暴停止了，我做了一次外环境勘察和休眠体外部地维护工作，虽然交给小安做就可以了，但我还是有些不放心。蒲公英23号的赘余空间外墙厚度少于出发前的20%，但对于在这里生存而言已经足够了。</li><li>236794年2月17日，通讯系统的修复失败了。见鬼，我为什么会想着去修复它，小安都没有做到，更何况量子力学还不是我的专业内容。我在焊接一个管道时不慎诱发了量子光栅的衰变，链式衰变引起的爆炸差点要了我的命，多亏了小安及时封闭了实验区我才得以幸存。等等小安你为啥要把这个计入SS事件啊喂？！</li><li>236794年3月2日，新家园正在向“近日点”接近，小安观测到一处平原的平均温度达到了10°C，我们决定转移到“第三平原”开展工作。</li><li>236794年3月23日，我手机了一些平原的土壤，在实验室里模拟此处环境，并对一些有很强抗逆性的草本植物进行栽培，接下来会进入两个月的观察期。</li><li>236794年4月14日，我决定将今天定为纪念日，植物观察过于枯燥，我利用这段时间，通过小安保留的一些数据碎片，还原了经典版本的大逃杀游戏。好吧我承认我和小安对战时输得很惨，但是这台破电脑绝对作了弊，为什么所有NPC都在集火我？</li><li>236794年6月2日，植物培养很成功，我已经在第三平原的土壤中播种了数种高抗逆性的草本植物，并抛撒了一些活化的微生物和小动物。我为小安制造了一个简易的行动装甲，他现在可以代替我照顾植物了。我决定再次冬眠，在这期间小安会按照我制作的任务清单进行工作，我决定让小安在这次模拟演替完成后唤醒我。</li><li>236797年9月7日，小安按照预计计划唤醒了我，经历了上一次的事件，我现在对醒来的事件特别敏感。我和小安种植的植物形成的生态系统已经初具规模，现在终于能吃上新鲜的失误了。在冬眠的几年里，小安仍没有收到任何引力波消息，甚至连求救信号都没有收到。</li><li>236797年9月9日，自从量子通讯失效后，UPS系统就断连了，我尝试下载了数万年前的最新UPS星图，并标注出了我们的航行轨迹，但这个星球所在的星域是完全没有探索过的一片空白。按照概率论看，至今还没有一个其他休眠体发现这里几乎是不可能的。因此我推测，经过这片星域的其他休眠体可能发生了与蒲公英23号同样或类似的事故，这便可以解释通讯问题。事故原因应该与未知射线的干扰有很大关系，这是否是普遍存在的？有多少休眠体发生过类似事故？女儿的失联与它有关吗？</li><li>236797年10月22日，我决定开始执行联合政府所要求的延续人类文明的人物，我已将两个人类胚胎放置于克隆舱中等待成熟，大概需要8个月左右吧，接下来可就要忙起来了。</li><li>236798年4月13日，我所规划的动植物已经基本适应了这里的环境，现在蒲公英23号旁就像一个普通的农村风景图。克隆舱里的小宝宝发育也很顺利，总之这里一切正常。小安拍摄了一部颇具纪念意义的纪录片，主角是它，嗯，不是我。</li></ul><hr><h3 id="第六章-236798年5月2日——陨胞事件"><a href="#第六章-236798年5月2日——陨胞事件" class="headerlink" title="第六章.236798年5月2日——陨胞事件"></a>第六章.236798年5月2日——陨胞事件</h3><p>&ensp;&ensp;&ensp;&ensp;凌晨两点，此时邓威仍在美梦之中，突如其来的警报声将他惊醒。他迅速地起立，发现整个休眠体全部覆盖在红色警报光中。<br>&ensp;&ensp;&ensp;&ensp;“小安？”邓威环顾四周，没有发现熟悉的蓝色呼吸灯，恐惧在心中逐渐蔓延开。<br>&ensp;&ensp;&ensp;&ensp;“邓博士，有紧急事件发生，请速到控制台。”小安几秒后作出了应答。<br>&ensp;&ensp;&ensp;&ensp;邓威以迅雷不及掩耳之势换好了服装奔至控制台。在发现控制台旁熟悉的深蓝色后，邓威松了一口气。<br>&ensp;&ensp;&ensp;&ensp;检测到指挥员的靠近，一行红色文字在控制台上方显示出来：</p><hr><div class="note danger">            <p>[EMERGENCY]检测到亚光速物体进入星系，正在驶入小行星带（SS级）</p>          </div><hr><p>&ensp;&ensp;&ensp;&ensp;邓威心里一惊，大喊道：“立刻显示模型！”<br>&ensp;&ensp;&ensp;&ensp;在经过几秒钟的“数据采集”后，全息投影浮现了出来。并不太长的红色曲线标注出该物体的轨迹，虚线标注出它的预计轨道。<br>&ensp;&ensp;&ensp;&ensp;“这是什么东西？”<br>&ensp;&ensp;&ensp;&ensp;“本机尝试使用了各种检测方式，均没有得到满意结果，但可以肯定的是，它有很厚的赘余空间。”小安回答道。<br>&ensp;&ensp;&ensp;&ensp;“赘余空间？那是！”邓威激动了起来。<br>&ensp;&ensp;&ensp;&ensp;“是的，基本可以肯定那是另一个休眠体。”<br>&ensp;&ensp;&ensp;&ensp;“用电磁波和它建立通讯通道，我要和指挥员联系！”</p><hr><div class="note warning">            <p>[ERROR]连接失败，错误代码：5104。推测原因：TCP无应答。</p>          </div><hr><p>&ensp;&ensp;&ensp;&ensp;邓威正准备提问，小安便抢先开口了：“本机正在对该休眠体建模，需要大概10分钟，但现在看来已经来不及了。”<br>&ensp;&ensp;&ensp;&ensp;邓威也发现了同样的问题，那个休眠体正在撞向一个小行星。<br>&ensp;&ensp;&ensp;&ensp;“它疯了吗？”邓威有些抓狂。<br>&ensp;&ensp;&ensp;&ensp;“看起来是它的主控计算机出了问题。”<br>&ensp;&ensp;&ensp;&ensp;“有什么我们能帮上忙的吗？”<br>&ensp;&ensp;&ensp;&ensp;“有，本机可以申请唤醒指挥员，互联冬眠系统有一个越过主控计算机的对外部接收器可以唤醒指挥员，但需要联合政府或至少三个休眠体的许可。”<br>&ensp;&ensp;&ensp;&ensp;邓威沉默了，这个条件不可能达成。就在这沉默之中，休眠体撞上了小行星。<br>&ensp;&ensp;&ensp;&ensp;投影中断了，在经过数分钟的数据采集后，控制台显示出了结果：小行星进入了新的轨道，携带着休眠体在小行星带中横冲直撞，引起了复杂的连锁撞击。<br>&ensp;&ensp;&ensp;&ensp;邓威闭上了双眼。<br>&ensp;&ensp;&ensp;&ensp;“建模完成了，”小安又一次打断了沉默，将投影内容替换为了休眠体模型，“这是休眠体B7号，它的赘余空间规模在撞击前就已经远不如正常状态了，指挥员生还的可能性几乎没有。”<br>&ensp;&ensp;&ensp;&ensp;“我们去看看。”邓威启动了核聚变发动机。</p><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版权声明&quot;&gt;&lt;a href=&quot;#版权声明&quot; class=&quot;headerlink&quot; title=&quot;版权声明&quot;&gt;&lt;/a&gt;版权声明&lt;/h2&gt;&lt;p&gt;本文严格进行版权限制，转载请先申请。&lt;/p&gt;
&lt;h2 id=&quot;更新说明&quot;&gt;&lt;a href=&quot;#更新说明&quot; class=&quot;headerlink&quot; title=&quot;更新说明&quot;&gt;&lt;/a&gt;更新说明&lt;/h2&gt;&lt;p&gt;原文已完成，但是笔者比较懒，因此定期更新，约2~3天更新一个章节，一共有十个章节，约一个月更完。&lt;br&gt;欢迎读者在下方评论区对剧情加以讨论，原文更新完成后便会发布新文章进行剧情分析。&lt;br&gt;update：在咕咕咕之后终于更新了。&lt;br&gt;update2: 更新周期拖延为一周一更，会在8月份更完的，咕咕咕。&lt;br&gt;update3：继续咕咕咕。&lt;/p&gt;
    
    </summary>
    
      <category term="科幻" scheme="https://blog.bill.moe/categories/%E7%A7%91%E5%B9%BB/"/>
    
    
      <category term="杂谈" scheme="https://blog.bill.moe/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>关于偶像行业的一些杂谈</title>
    <link href="https://blog.bill.moe/talks-idol/"/>
    <id>https://blog.bill.moe/talks-idol/</id>
    <published>2019-06-10T13:21:22.000Z</published>
    <updated>2019-08-21T09:52:32.608Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="不宜阅读人群"><a href="#不宜阅读人群" class="headerlink" title="不宜阅读人群"></a>不宜阅读人群</h2><blockquote class="blockquote-center"><p>“喂，前面可是地狱啊！”</p><font color="#FF0000">--- RIP WARNING ---</font></blockquote><p>以下人群不宜阅读本文：</p><ul><li>蔡徐坤粉丝</li><li>臭DD</li><li>二次元路人</li><li>心脏病、高血压患者</li><li>孕妇、头晕病患者</li><li>曾遭受过重大精神创伤，即将跳楼者</li></ul><p>如果当场去世，笔者概不负责。</p><a id="more"></a><div class="note error">            <p>警告，本文已被作者弃坑，可能会带来不愉快的阅读体验。<br>文章状态：原稿已完成但誊抄时间无限期延长。<br>您可以通过评论打赏或其他方式支持作者的工作，这可能会使作者重新填坑。</p>          </div><h2 id="律师函规避"><a href="#律师函规避" class="headerlink" title="律师函规避"></a>律师函规避</h2><p>正文前声明：<br>我是蔡徐坤的粉丝，我超喜欢蔡徐坤的，每天上抖音看看他的视频，够我看一天的，为啥要讨厌呢。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&ensp;&ensp;&ensp;&ensp;关于偶像行业，常与我的日常生活有一定交集。我不是一个追星族，曾经很难理解追星族的狂热以及他们付出远大于回报的行动，直到我高一时才开始理解其中的原因。简单的来说，追星可以视作一种欲望或妄想，粉丝通过将追星对象视作恋爱对象来满足自己的恋爱需求，所以追星行为可以理解为恋爱冲动，便可以理解了。考虑到感情的复杂性，本人暂无法对此做出深入的解释，本文主要对偶像行业的历史发展做一些杂谈。<br>&ensp;&ensp;&ensp;&ensp;第一个偶像的诞生一定是历史性的，得出这一构想的第一个P（当然也有可能没有P）一定是天才，因为他巧妙地利用了人性的特点。当然文化产业的发展需要工业发展的支撑，若人们连吃饱喝足都做不到，还何谈追星呢？等等，我可能需要撤回前言，中国共产党好像确实是在困难的环境发展起来的，这样看来将马克思打造为IP<sup><a href="#fn_1" id="reffn_1">1</a></sup>确实能有效果了。大家最早接触到的偶像可能是电视、电影明星，但严格意义上讲，他们并不能算偶像，一般的偶像是指通过唱歌、跳舞“售卖自己”的工作者。而且这一类电视、电影明星的追星一般来得快也去得快（不幸冒犯的读者请刀下留人，放我一马，感谢你的大恩大德），我曾追过<em>本尼迪克特·康伯巴奇</em>这位演员，他的表演风格吸引了我，不过没能撑过一个月。为什么会出现这样的状况呢？或许与其表演周期有关，<strong>若表演周期太长，粉丝的热情就会逐渐消退</strong>（各位亲爱的up主/鸽子们，你们听到了吗？）。而一般的偶像们，表演周期较短，与粉丝们的距离较近，因此积累了一大批人气。<br>&ensp;&ensp;&ensp;&ensp;我们不妨将上述提到的偶像称为纯三次元偶像，三次元偶像也有一定的职业缺陷和难处。纯三次元偶像都有一定的生命周期，30岁是一个极限，很少有偶像可以持续活动到30岁之后，对于童星们，这个周期可能更短。偶像免不了会被更新换代，那么被更新换代之后的偶像呢？便只能投入正常人的工作与生活了。终将成为“天涯沦落人”，这便是纯三次元偶像的职业缺陷。职业难处呢，则是在偶像的生命周期内要防偷拍、注意日常形象、可能存在的安全问题，最重要的是：<strong>不能谈恋爱</strong>（贴贴<sup><a href="#fn_2" id="reffn_2">2</a></sup>除外）。前段时间鹿晗所公布的自己与关晓彤的恋情，让鹿晗的粉丝们十分愤怒，从而粉转路或粉转黑，并且这样的过程是不可逆的，它几乎直接宣判了偶像生命的结束。不得不承认的是，这个职业要求的确十分苛刻。可能有一些路人不能理解为什么偶像谈恋爱会引起粉丝的愤怒，并将原因归结于粉丝素质低。可是事实却是粉丝的确有权利为此愤怒，曾有很多文章分析过这个问题，此处就不再赘述。关于第二点，粉丝被视为“狂热”的代名词很长时间，并发展出“脑残粉”等一系列的词汇。可不得不提的是，粉丝素质在现在可以说是相当出色了，中国粉丝团对乃木坂46的应援过程<sup><a href="#fn_3" id="reffn_3">3</a></sup>也同样改变了我对粉丝的印象。<br>&ensp;&ensp;&ensp;&ensp;日本是走在偶像事业前列的国家，碰巧的是日本同样是ACG强国，这二者不可避免的融合，引发了一次偶像启蒙。2007年，以初音未来为代表的V家诞生，让人们看到了这个行业更多的可能性。V家最大的意义在于帮助了许多创作人突破自身的限制更好地制作作品，与此同时初音未来的演唱会也十分火爆。<br>&ensp;&ensp;&ensp;&ensp;第一次偶像革命（当然，是我认为的），电击杂志宣布了其新企划——Lovelive!随后该企划的第一代偶像μ’s开始活动，其火爆程度与盈利曾一度吊打其他偶像与动画（如马猴烧酒系列）。Lovelive!是一个二三次元融合的企划，既有动画作品，又有真人声优兼偶像，二次元角色与声优同时登台演出，是首次将二次元角色代入三次元称为偶像的企划（大概吧）。目前Lovelive!已经发展到第二代（第三代？拉拉人震惊！），但仍然受到广泛欢迎。不妨分析一下这个企划成功的原因，它同时讨好了两个圈子的受众，追星族当然是不讨厌二次元形象的（是吗？），而宅们的梦想就是有一天能够打破次元壁，而这个计划显然是对次元壁的一次冲击。但其局限性也很明显——人员问题，偶像活动需要大量时间与精力，同时对偶像的体力也有较高要求。这个企划成立的关键在于CV，局限同样也在于CV。CV不可能无限制的投入偶像工作，因为她们仍然有自己的本职工作，同时精力体力有限。因此Lovelive!只能定期对偶像们进行洗牌、更替。想必μ’s解散三年后的今天，仍会有拉拉人喊出：“μ’sic forever!”然而天下没有不散的宴席，这是无法避免的结局。<br>&ensp;&ensp;&ensp;&ensp;这时插入一段插曲，前段时间在B站大火的偶像练习生蔡徐坤。“喜欢唱、跳、rap、篮球”这一段视频起到了很好的宣传（负面）作用，并闹出了一系列的笑话。宣传视频本身没有毛病，因为偶像给自己打广告是完全可以理解接受的，可不能理解的是为什么他一定要用篮球来宣传呢？对于一个篮球外行人，以外行来宣传自己可能起到很好的效果吗？这不仅是对篮球事业的不尊重，更是对观众的不尊重。怎样的偶像可以被称为最好的偶像呢？这样的偶像不是为了赚钱或者他人的要求而表演，而是出于自己的希望，想要打动某人，想要让某人露出微笑的心情，即使没有任何支撑也无法阻挡他们成为最棒的偶像<sup><a href="#fn_4" id="reffn_4">4</a></sup>。<br>&ensp;&ensp;&ensp;&ensp;第二次偶像启蒙（当然，还是我认为的），代表性人物是楪祈<sup><a href="#fn_5" id="reffn_5">5</a></sup>与神崎艾莎<sup><a href="#fn_6" id="reffn_6">6</a></sup>。她（他）们通过二次元出道，或同时参与了二次元创作，圈了一波二次元粉，同时延长了自己的生命周期，是一种非常优秀的吸粉手段。</p><p><strong>未完待续</strong></p><blockquote id="fn_1"><sup>1</sup>. 《追风者》中马克思的形象广受青少年的欢迎。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>. 贴贴是指偶像之间的亲密行为，一般是指同性偶像间。如，王源与王俊凯。<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><blockquote id="fn_3"><sup>3</sup>. 乃木坂46中国粉丝团团长制作了很多应援用纸片，背面印有粉丝应援的注意事项，粉丝团长甚至拜托了山下智博将精心制作的绘本送给乃木坂46成员，这里是<a href="http://www.bilibili.com/video/av38548787?share_medium=android&amp;share_source=qq&amp;bbid=RSZDJUYnFXFJcBUnWydbYlpiW24PPAw5DjoNinfoc&amp;ts=1560247885261" target="_blank" rel="noopener">视频链接</a>。<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote><blockquote id="fn_4"><sup>4</sup>. “帆楼$\cdots$五星级偶像$\cdots$达成。”NGNL中白对帆楼的评价。<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote><blockquote id="fn_5"><sup>5</sup>. 楪祈，《罪恶王冠》女主角，同时也是EGORIST乐团主唱。<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a></blockquote><blockquote id="fn_6"><sup>6</sup>. 神崎艾莎，英文名ReoNa，曾在《刀剑神域》外传GGO中担任剧中歌手，后以超高人气出道成为歌手。歌风细腻温情，非常擅长吉他弹唱，在外传GGO中的弹奏唱功可圈可点。<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;不宜阅读人群&quot;&gt;&lt;a href=&quot;#不宜阅读人群&quot; class=&quot;headerlink&quot; title=&quot;不宜阅读人群&quot;&gt;&lt;/a&gt;不宜阅读人群&lt;/h2&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“喂，前面可是地狱啊！”&lt;/p&gt;
&lt;font color=&quot;#FF0000&quot;&gt;--- RIP WARNING ---&lt;/font&gt;&lt;/blockquote&gt;
&lt;p&gt;以下人群不宜阅读本文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蔡徐坤粉丝&lt;/li&gt;
&lt;li&gt;臭DD&lt;/li&gt;
&lt;li&gt;二次元路人&lt;/li&gt;
&lt;li&gt;心脏病、高血压患者&lt;/li&gt;
&lt;li&gt;孕妇、头晕病患者&lt;/li&gt;
&lt;li&gt;曾遭受过重大精神创伤，即将跳楼者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果当场去世，笔者概不负责。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://blog.bill.moe/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://blog.bill.moe/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>「独家」给你的Hexo博客添加萌萌哒看板娘(✪ω✪)</title>
    <link href="https://blog.bill.moe/hexo-live2d-poster-girl/"/>
    <id>https://blog.bill.moe/hexo-live2d-poster-girl/</id>
    <published>2019-06-10T06:01:47.000Z</published>
    <updated>2019-11-26T12:29:56.048Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>见博客左下角。（可能不支持手机）  </p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>使用以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-helper-live2d@2.1.2 --save</span><br></pre></td></tr></table></figure></p><p>安装live2d插件。  </p><p><strong>注意此处必须安装2.1.2版本，请勿安装最新版本。</strong></p><p>进入<a href="https://github.com/journey-ad/live2d_src" target="_blank" rel="noopener">github项目</a>下载最新源码，替换<code>blog/node_modules/hexo-helper-live2d</code>的对应文件。  </p><a id="more"></a><h2 id="Next主题v7-3-0须知"><a href="#Next主题v7-3-0须知" class="headerlink" title="Next主题v7.3.0须知"></a>Next主题v7.3.0须知</h2><div class="note warning">            <p>使用NexT主题v7.3.0版本的用户请在<code>blog/themes/next/_config.swig</code>中将以下片段：</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.swig</span><br><span class="line">  #header: source/_data/header.swig</span><br><span class="line">  #sidebar: source/_data/sidebar.swig</span><br><span class="line">  #postMeta: source/_data/post-meta.swig</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.swig</span><br><span class="line">  #footer: source/_data/footer.swig</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  #style: source/_data/styles.styl</span><br></pre></td></tr></table></figure><div class="note warning">            <p>根据下文所需要改动的自定义文件取消引用对应内容，并在<code>blog/source/_data/...</code>中添加改动内容。</p>          </div><h2 id="下载资源"><a href="#下载资源" class="headerlink" title="下载资源"></a>下载资源</h2><p>点击下载<a href="/file/Potion-Maker.zip" download="Potion-Maker.zip">本博客使用的live2d模组（曾经）</a>，用户也可以自行寻找其他live2d模组。<br>点击下载<a href="/lib/poster-girl/live2d.js" download="live2d.js"><code>live2d.js</code></a><br>点击下载<a href="/lib/poster-girl/waifu-tips.js" download="waifu-tips.js"><code>waifu-tips.js</code></a><br>点击下载<a href="/lib/poster-girl/waifu-tips.json" download="waifu-tips.json"><code>waifu-tips.json</code></a></p><h2 id="配置及引用文件"><a href="#配置及引用文件" class="headerlink" title="配置及引用文件"></a>配置及引用文件</h2><p>选择一个live2d角色，将其对应文件夹置入<code>blog/node_modules/hexo-helper-live2d/assets/</code>。<br>重命名<code>model.json</code>为<code>xxx.model.json</code>，其中<code>xxx</code>是选择的角色名字。（例如我选择的是pio）</p><p>在<code>blog/_config.yml</code>中添加以下内容：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span> </span><br><span class="line"><span class="attr">  model:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure></p><p>将<code>live2d.js</code>，<code>waifu-tips.js</code>，<code>waifu-tips.json</code>，均置于新文件夹<code>blog/themes/next/source/lib/poster-girl</code>中。</p><p>在<code>blog/themes/next/layout/_custom/head.swig</code>中添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- jquery --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- live2d --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"waifu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"waifu-tips"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"live2d"</span> <span class="attr">width</span>=<span class="string">"240"</span> <span class="attr">height</span>=<span class="string">"210"</span> <span class="attr">class</span>=<span class="string">"live2d"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"/lib/poster-girl/waifu-tips.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/lib/poster-girl/live2d.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    loadlive2d(<span class="string">"live2d"</span>, <span class="string">"/live2d/assets/xxx.model.json"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意上述片段中关于<code>xxx.model.json</code>的适配。</p><h2 id="css配置"><a href="#css配置" class="headerlink" title="css配置"></a>css配置</h2><p>在<code>blog/themes/next/source/css/_custom/custom.styl</code>中添加以下内容： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line">// live2d</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.waifu</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(3px);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(3px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(0);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (max-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.waifu</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu-tips</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(224, 186, 140, 0.62);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(236, 217, 188, 0.5);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">3px</span> <span class="number">15px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(191, 158, 118, 0.2);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">50s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">animation-name</span>: shake;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waifu</span> <span class="selector-id">#live2d</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> shake &#123;</span><br><span class="line">  2% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, -1.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  4% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, 1.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  6% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(1.5px, 1.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  8% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, 1.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  10% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, 2.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  12% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(1.5px, 1.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  14% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, 0.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  16% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, -0.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  18% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, 0.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, 2.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  22% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, -1.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  24% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 1.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  26% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(1.5px, 0.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  28% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-0.5px, -0.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  30% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(1.5px, -0.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  32% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, -1.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  34% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, 2.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  36% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, -1.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  38% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, -0.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  40% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-0.5px, 2.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  42% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 2.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  44% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 1.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  46% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(1.5px, -0.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  48% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, -0.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 1.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  52% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-0.5px, 1.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  54% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 1.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  56% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, 2.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  58% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, 2.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  60% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, -1.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  62% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 0.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  64% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 1.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  66% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, 2.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  68% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, -1.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  70% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, 2.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  72% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-0.5px, -1.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  74% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 2.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  76% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 2.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  78% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 2.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 0.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  82% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 0.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  84% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-0.5px, 0.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  86% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, 1.5px) <span class="built_in">rotate</span>(0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  88% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, 0.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  90% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, -0.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  92% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, -1.5px) <span class="built_in">rotate</span>(1.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  94% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0.5px, 0.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  96% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(2.5px, -0.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  98% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-1.5px, -1.5px) <span class="built_in">rotate</span>(-0.5deg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  0%, 100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(0, 0) <span class="built_in">rotate</span>(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注1：如果需要在页面右侧放置live2d，请将上述代码中的<code>left: 0;</code>改为<code>right: 100px;</code>，如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.waifu</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(3px);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(3px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注2：如果发现live2d模型被截去了一半，说明画布不够大，定位到下方代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"waifu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"waifu-tips"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"live2d"</span> <span class="attr">width</span>=<span class="string">"240"</span> <span class="attr">height</span>=<span class="string">"210"</span> <span class="attr">class</span>=<span class="string">"live2d"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>调整<code>width</code>和<code>height</code>的大小即可。</p><p>如果模型显示有其他问题，欢迎提问。</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这样一个完整的会说话的live2d就完成了，赶紧打开网页看看吧！<br>如果出现了问题，请在下方留言。</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="自定义live2d模型"><a href="#自定义live2d模型" class="headerlink" title="自定义live2d模型"></a>自定义live2d模型</h3><p>参考<a href="#参考资料">参考资料1</a></p><h3 id="自定义说话内容"><a href="#自定义说话内容" class="headerlink" title="自定义说话内容"></a>自定义说话内容</h3><p>修改：<code>waifu-tips.js</code>或<code>waifu-tips.json</code></p><h3 id="自定义对话框动画"><a href="#自定义对话框动画" class="headerlink" title="自定义对话框动画"></a>自定义对话框动画</h3><p>修改上述css配置中<code>@keyframes shake</code>项</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-01" target="_blank" rel="noopener">给博客添加能动的看板娘(Live2D)-关于模型的二三事 - imjad</a></li><li><a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02" target="_blank" rel="noopener">给博客添加能动的看板娘(Live2D)-将其添加到网页上吧 - imjad</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;见博客左下角。（可能不支持手机）  &lt;/p&gt;
&lt;h2 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插件&lt;/h2&gt;&lt;p&gt;使用以下命令&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-helper-live2d@2.1.2 --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装live2d插件。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意此处必须安装2.1.2版本，请勿安装最新版本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入&lt;a href=&quot;https://github.com/journey-ad/live2d_src&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github项目&lt;/a&gt;下载最新源码，替换&lt;code&gt;blog/node_modules/hexo-helper-live2d&lt;/code&gt;的对应文件。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://blog.bill.moe/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.bill.moe/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://blog.bill.moe/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-NexT主题自定义配置高阶教程</title>
    <link href="https://blog.bill.moe/hexo-theme-next-config-optimization/"/>
    <id>https://blog.bill.moe/hexo-theme-next-config-optimization/</id>
    <published>2019-06-10T05:21:01.000Z</published>
    <updated>2019-08-14T06:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>本教程面向Hexo，NexT主题v6.x~v7.2.0进行优化。<br>若使用的是v7.3.0或更高版本，本文会有特殊提示，请注意。<br>其他主题或NexT版本或不能直接套用，需要自行修改。<br>搜索插件推荐使用<code>local-search</code>。  </p><a id="more"></a><h3 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h3><p>这是一篇高阶教程，阅读前需要了解以下内容。  </p><ul><li><p>清晰地了解Hexo文件的目录架构。  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">├──</span> <span class="string">.deploy</span>          <span class="comment">#部署文件夹</span></span><br><span class="line"><span class="string">├──</span> <span class="string">public</span>           <span class="comment">#html源码，hexo g生成</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scaffolds</span>        <span class="comment">#模板</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scripts</span>          <span class="comment">#扩展脚本</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span>           <span class="comment">#文章源码</span></span><br><span class="line"><span class="string">|   ├── _drafts      #草稿</span></span><br><span class="line"><span class="string">|   └── _posts       #文章</span></span><br><span class="line"><span class="string">├── themes           #主题</span></span><br><span class="line"><span class="string">|   ├── next         #NexT主题</span></span><br><span class="line"><span class="string">├── _config.yml      #博客配置</span></span><br><span class="line"><span class="string">└── package.json     #应用程序数据</span></span><br></pre></td></tr></table></figure></li><li><p>清晰地了解NexT主题的目录架构。  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">├──</span> <span class="string">.github</span>                <span class="comment">#github信息</span></span><br><span class="line"><span class="string">├──</span> <span class="string">languages</span>              <span class="comment">#多语言</span></span><br><span class="line"><span class="string">|   ├── _en.yml            #默认语言</span></span><br><span class="line"><span class="string">|   └── zh-CN.yml          #简体中文</span></span><br><span class="line"><span class="string">|   └── zh-TW.yml          #繁体中文</span></span><br><span class="line"><span class="string">├── layout                 #布局，根目录下的*.swig文件是对主页，分页，存档等的控制</span></span><br><span class="line"><span class="string">|   ├── _custom            #可以自定义的模板，覆盖原有模板</span></span><br><span class="line"><span class="string">|   |   ├── head.swig      #文首样式</span></span><br><span class="line"><span class="string">|   |   ├── header.swig    #头部样式</span></span><br><span class="line"><span class="string">|   |   ├── sidebar.swig   #侧边栏样式</span></span><br><span class="line"><span class="string">|   ├── _macro             #可以自定义的模板，覆盖原有模板</span></span><br><span class="line"><span class="string">|   |   ├── post.swig      #文章模板</span></span><br><span class="line"><span class="string">|   |   ├── reward.swig    #打赏模板</span></span><br><span class="line"><span class="string">|   |   ├── sidebar.swig   #侧边栏模板</span></span><br><span class="line"><span class="string">|   ├── _partial           #局部的布局</span></span><br><span class="line"><span class="string">|   |   ├── head           #头部模板</span></span><br><span class="line"><span class="string">|   |   ├── search         #搜索模板</span></span><br><span class="line"><span class="string">|   |   ├── share          #分享模板</span></span><br><span class="line"><span class="string">|   ├── _script            #局部的布局</span></span><br><span class="line"><span class="string">|   ├── _third-party       #第三方模板</span></span><br><span class="line"><span class="string">|   ├── _layout.swig       #主页面模板</span></span><br><span class="line"><span class="string">|   ├── index.swig         #主页面模板</span></span><br><span class="line"><span class="string">|   ├── page               #页面模板</span></span><br><span class="line"><span class="string">|   └── tag.swig           #tag模板</span></span><br><span class="line"><span class="string">├── scripts                #script源码</span></span><br><span class="line"><span class="string">|   ├── tags               #tags的script源码</span></span><br><span class="line"><span class="string">|   ├── marge.js           #页面模板</span></span><br><span class="line"><span class="string">├── source                 #源码</span></span><br><span class="line"><span class="string">|   ├── css                #css源码</span></span><br><span class="line"><span class="string">|   |   ├── _common        #*.styl基础css</span></span><br><span class="line"><span class="string">|   |   ├── _custom        #*.styl自定义局部css</span></span><br><span class="line"><span class="string">|   |   └── _mixins        #mixins的css</span></span><br><span class="line"><span class="string">|   ├── fonts              #字体</span></span><br><span class="line"><span class="string">|   ├── images             #图片</span></span><br><span class="line"><span class="string">|   ├── js                 #javascript源代码</span></span><br><span class="line"><span class="string">|   └── lib                #引用库</span></span><br><span class="line"><span class="string">├── _config.yml            #主题配置文件</span></span><br><span class="line"><span class="string">└── README.md              #说明文件</span></span><br></pre></td></tr></table></figure></li></ul><div class="note warning">            <p>NexT主题v7.3.0版本将所有自定义custom文件转移至Hexo目录<code>source/_data/...</code>中。</p>          </div><ul><li>简单了解css，swig语法与js语法。  </li></ul><h3 id="Next主题v7-3-0须知"><a href="#Next主题v7-3-0须知" class="headerlink" title="Next主题v7.3.0须知"></a>Next主题v7.3.0须知</h3><div class="note warning">            <p>使用NexT主题v7.3.0版本的用户请在<code>blog/themes/next/_config.swig</code>中将以下片段：</p>          </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.swig</span><br><span class="line">  #header: source/_data/header.swig</span><br><span class="line">  #sidebar: source/_data/sidebar.swig</span><br><span class="line">  #postMeta: source/_data/post-meta.swig</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.swig</span><br><span class="line">  #footer: source/_data/footer.swig</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  #style: source/_data/styles.styl</span><br></pre></td></tr></table></figure><div class="note warning">            <p>根据下文所需要改动的自定义文件取消引用对应内容，并在<code>blog/source/_data/...</code>中添加改动内容。</p>          </div><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="jQuery库引入"><a href="#jQuery库引入" class="headerlink" title="jQuery库引入"></a>jQuery库引入</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>部分js库需要用到jQuery，为了运行这些js，需要引用jQuery。  </p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>在<code>blog/themes/next/_config.swig</code>找到并修改为如下内容：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  # Internal path prefix. Please do not edit it.</span><br><span class="line">  _internal: lib</span><br><span class="line"></span><br><span class="line">  # Internal version: 2.1.3</span><br><span class="line">  jquery: https://code.jquery.com/jquery-2.1.3.min.js</span><br></pre></td></tr></table></figure></p><p>为了保险，我们再在head中引用一下，本人引用库习惯放在<code>head.swig</code>而非<code>header.swig</code>中。  </p><p>在<code>blog/themes/next/layout/_custom/head.swig</code>中添加以下内容：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jquery --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-2.1.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="在博客打字时添加粒子特效"><a href="#在博客打字时添加粒子特效" class="headerlink" title="在博客打字时添加粒子特效"></a>在博客打字时添加粒子特效</h3><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>可在本博客的评论框或搜索框中尝试打字。  </p><h4 id="添加js文件"><a href="#添加js文件" class="headerlink" title="添加js文件"></a>添加js文件</h4><p>点击下载<a href="/lib/activate-power-mode/activate-power-mode.js" download="activate-power-mode.js"><code>activate-power-mode.js</code></a></p><p>将文件放置在<code>blog/themes/next/source/lib/activate-power-mode/activate-power-mode.js</code>  </p><h4 id="引用js文件"><a href="#引用js文件" class="headerlink" title="引用js文件"></a>引用js文件</h4><p>在<code>blog/themes/next/layout/_custom/head.swig</code>中添加以下内容：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打字礼花及震动特效 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"append_parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ajaxwaitid"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/lib/activate-power-mode/activate-power-mode.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">POWERMODE.colorful = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">POWERMODE.shake = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.addEventListener(<span class="string">'input'</span>,POWERMODE);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h4><p>其中<code>POWERMODE.shake</code>是震动效果，修改为<code>true</code>可开启，<code>POWERMODE.colorful</code>是粒子颜色，修改为<code>false</code>可配置为单色。  </p><h3 id="修改博客背景"><a href="#修改博客背景" class="headerlink" title="修改博客背景"></a>修改博客背景</h3><p>将背景图片放置在<code>blog/themes/next/source/images/background.jpg</code>  </p><p>在<code>blog/themes/next/source/css/_custom/custom.styl</code>中添加以下内容：  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// background</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(../images/background.jpg);</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>:repeat-x;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">  <span class="attribute">background-size</span>:cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进阶教程"><a href="#进阶教程" class="headerlink" title="进阶教程"></a>进阶教程</h4><p>若想要博客背景与浏览器大小同步缩放，可以将上述代码修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// background</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(../images/background.png);</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>:repeat-x;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">  <span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="博客内容透明化"><a href="#博客内容透明化" class="headerlink" title="博客内容透明化"></a>博客内容透明化</h3><p>NexT主题的博客文章均是不透明的，<del>这样读者就不能好好欣赏背景图片了</del>，下面的方法可以使博客内容透明化：</p><p>在<code>blog/themes/next/source/css/_custom/custom.styl</code>中添加以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// page-opacity</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255,255,255,0.85);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>content-wrap</code>是文章内容的透明度设置，<code>sidebar</code>是侧边框的透明度设置，<code>header-inner</code>是菜单栏的透明度设置，<code>popup</code>是搜索框（<code>local-search</code>）的透明度设置。  </p><p>可以修改上面的数字来自定义透明度。</p><p>注意其中<code>header-inner</code>不能使用<code>opacity</code>进行配置。<br>因为<code>header-inner</code>包含<code>header.swig</code>中的所有内容。<br>若使用<code>opacity</code>进行配置，子结点会出很多问题。</p><h3 id="修改local-search加载图标"><a href="#修改local-search加载图标" class="headerlink" title="修改local-search加载图标"></a>修改local-search加载图标</h3><p>在<code>blog/themes/next/layout/_third-party/search/localsearch.swig</code>中寻找：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-spinner fa-pulse fa-5x fa-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>将其修改为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-circle-o-notch fa-spin fa-5x fa-fw margin-bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>更多选择可以参考<a href="http://fontawesome.dashgame.com/#spinning" target="_blank" rel="noopener">这里</a>。  </p><div class="note warning">            <p>使用NexT主题v7.3.0版本的用户请在<code>blog/themes/next/source/js/local-search.js</code>中执行以上修改。</p>          </div><h3 id="修改Markdown分割线样式"><a href="#修改Markdown分割线样式" class="headerlink" title="修改Markdown分割线样式"></a>修改Markdown分割线样式</h3><p>Markdown自带的分割线比较难看，现在我们将其修改为简洁的分割线。  </p><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><hr><h4 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h4><p>在<code>blog/themes/next/source/css/_common/scaffolding/base.styl</code>中寻找：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-linear-gradient</span>(</span><br><span class="line">  <span class="selector-tag">-45deg</span>,</span><br><span class="line">  <span class="selector-tag">white</span>,</span><br><span class="line">  <span class="selector-tag">white</span> 4<span class="selector-tag">px</span>,</span><br><span class="line">  <span class="selector-tag">transparent</span> 4<span class="selector-tag">px</span>,</span><br><span class="line">  <span class="selector-tag">transparent</span> 8<span class="selector-tag">px</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>将这一段引用掉即可。  </p><h3 id="评分系统设置"><a href="#评分系统设置" class="headerlink" title="评分系统设置"></a>评分系统设置</h3><p>在<code>blog/themes/next/_config.yml</code>中寻找：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rating:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  id:</span>     <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line"><span class="attr">  color:</span>  <span class="string">fc6423</span></span><br></pre></td></tr></table></figure></p><p>在<a href="https://widgetpack.com" target="_blank" rel="noopener">这里</a>获得id，即为左上角的数字：<br><img src="/hexo-theme-next-config-optimization/20180310074831408.png" alt>  </p><p>将<code>enable</code>改为<code>true</code>，将<code>id</code>填入。  </p><p>然后在侧栏找到rating的setting：<br><img src="/hexo-theme-next-config-optimization/20180310075010766.png" alt>  </p><p>这里可以作各种设置。<br>推荐将投票方式改为ip投票，因为这个平台提供的账号投票基本不面向国内。<br><img src="/hexo-theme-next-config-optimization/20180310075134426.png" alt>  </p><h3 id="live2d看板娘"><a href="#live2d看板娘" class="headerlink" title="live2d看板娘"></a>live2d看板娘</h3><p>见<a href="/hexo-live2d-poster-girl/">这里</a></p><h3 id="Hitokoto一言"><a href="#Hitokoto一言" class="headerlink" title="Hitokoto一言"></a>Hitokoto一言</h3><p>见<a href="/add-hitokoto/">这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;h3 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h3&gt;&lt;p&gt;本教程面向Hexo，NexT主题v6.x~v7.2.0进行优化。&lt;br&gt;若使用的是v7.3.0或更高版本，本文会有特殊提示，请注意。&lt;br&gt;其他主题或NexT版本或不能直接套用，需要自行修改。&lt;br&gt;搜索插件推荐使用&lt;code&gt;local-search&lt;/code&gt;。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://blog.bill.moe/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.bill.moe/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://blog.bill.moe/tags/NexT/"/>
    
  </entry>
  
</feed>
